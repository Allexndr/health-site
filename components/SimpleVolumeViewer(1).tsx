'use client'

import React, { useState, useRef, useEffect } from 'react'
import { 
  CubeIcon,
  EyeIcon,
  DocumentArrowDownIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  XCircleIcon,
  CogIcon,
  PlayIcon,
  PauseIcon,
  InformationCircleIcon,
  ArrowsPointingOutIcon,
  ArrowsPointingInIcon
} from '@heroicons/react/24/outline'
import { toast } from 'sonner'

interface VolumeData {
  data: Uint16Array
  width: number
  height: number
  depth: number
  metadata: {
    patientName: string
    patientId: string
    studyDate: string
  }
}

export default function SimpleVolumeViewer() {
  const [volumeData, setVolumeData] = useState<VolumeData | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [isPlaying, setIsPlaying] = useState(false)
  const [windowLevel, setWindowLevel] = useState(1000)
  const [windowWidth, setWindowWidth] = useState(2000)
  const [threshold, setThreshold] = useState(500)
  const [opacity, setOpacity] = useState(0.8)
  const [is3DMode, setIs3DMode] = useState(true)
  const [currentSlice, setCurrentSlice] = useState(0)
  
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)
  const animationRef = useRef<number>()
  const sceneRef = useRef<any>(null)
  const rendererRef = useRef<any>(null)
  const cameraRef = useRef<any>(null)
  const controlsRef = useRef<any>(null)

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    setIsLoading(true)
    setError(null)

    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª:', file.name, '–†–∞–∑–º–µ—Ä:', file.size, '–±–∞–π—Ç')
      
      if (file.name.toLowerCase().endsWith('.vol')) {
        // OneVolumeViewer .vol —Ñ–∞–π–ª
        console.log('üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º .vol —Ñ–∞–π–ª')
        await loadOneVolumeFile(file)
      } else if (file.name.toLowerCase().endsWith('.zip')) {
        // ZIP –∞—Ä—Ö–∏–≤ —Å OneVolumeViewer —Ñ–∞–π–ª–∞–º–∏
        console.log('üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ZIP –∞—Ä—Ö–∏–≤')
        await loadOneVolumeArchive(file)
      } else {
        throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è .vol –∏ .zip –∞—Ä—Ö–∏–≤—ã OneVolumeViewer')
      }
      
      toast.success('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', {
        description: `–û–±—ä–µ–º: ${volumeData?.width}√ó${volumeData?.height}√ó${volumeData?.depth}`,
        duration: 3000
      })
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', {
        description: error.message,
        duration: 5000
      })
      setError(error.message)
    } finally {
      setIsLoading(false)
      // Clear the input to allow re-uploading the same file
      event.target.value = ''
    }
  }

  const loadOneVolumeFile = async (file: File) => {
    console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º .vol —Ñ–∞–π–ª:', file.name, '–†–∞–∑–º–µ—Ä:', file.size, '–±–∞–π—Ç')
    
    const arrayBuffer = await file.arrayBuffer()
    console.log('üìä ArrayBuffer —Ä–∞–∑–º–µ—Ä:', arrayBuffer.byteLength, '–±–∞–π—Ç')
    
    // Ensure the buffer length is even for Uint16Array
    const bufferLength = arrayBuffer.byteLength
    const alignedLength = Math.floor(bufferLength / 2) * 2
    
    if (alignedLength !== bufferLength) {
      console.warn(`‚ö†Ô∏è Buffer length ${bufferLength} is not even, truncating to ${alignedLength}`)
    }
    
    // Create a properly aligned buffer for Uint16Array
    const alignedBuffer = arrayBuffer.slice(0, alignedLength)
    const volumeArray = new Uint16Array(alignedBuffer)
    
    console.log('üî¢ Uint16Array —Ä–∞–∑–º–µ—Ä:', volumeArray.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤')
    
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∫—É–±–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º (—Ç–∏–ø–∏—á–Ω–æ –¥–ª—è OneVolumeViewer)
    const totalVoxels = volumeArray.length
    const size = Math.cbrt(totalVoxels)
    
    console.log('üìê –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—É–±–∞:', size)
    
    if (Math.abs(size - Math.round(size)) > 0.1) {
      throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è –∫—É–±–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º, –ø–æ–ª—É—á–µ–Ω–æ: ${totalVoxels} –≤–æ–∫—Å–µ–ª–µ–π (${size.toFixed(2)}¬≥)`)
    }
    
    const dimensions = Math.round(size)
    console.log('‚úÖ –†–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–º–∞:', dimensions, '√ó', dimensions, '√ó', dimensions)
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const sortedData = [...volumeArray].sort((a, b) => a - b)
    const percentile95 = sortedData[Math.floor(sortedData.length * 0.95)]
    const percentile5 = sortedData[Math.floor(sortedData.length * 0.05)]
    const optimalThreshold = Math.max(percentile5, 100) // –ú–∏–Ω–∏–º—É–º 100
    
    console.log('üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥:', optimalThreshold, '(95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å:', percentile95, ')')
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    setThreshold(optimalThreshold)
    
    setVolumeData({
      data: volumeArray,
      width: dimensions,
      height: dimensions,
      depth: dimensions,
      metadata: {
        patientName: '–ü–∞—Ü–∏–µ–Ω—Ç',
        patientId: 'ID',
        studyDate: new Date().toISOString().split('T')[0]
      }
    })
  }

  const loadOneVolumeArchive = async (file: File) => {
    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º ZIP –∞—Ä—Ö–∏–≤:', file.name, '–†–∞–∑–º–µ—Ä:', file.size, '–±–∞–π—Ç')
    
    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ZIP –∞—Ä—Ö–∏–≤–∞
    const JSZip = (await import('jszip')).default
    const zip = new JSZip()
    const zipContent = await zip.loadAsync(file)
    
    console.log('üìã –§–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ:', Object.keys(zipContent.files))
    
    // –ò—â–µ–º .vol —Ñ–∞–π–ª
    const volFile = Object.values(zipContent.files).find(f => 
      f.name.toLowerCase().endsWith('.vol')
    )
    
    if (!volFile) {
      throw new Error('–§–∞–π–ª .vol –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ')
    }
    
    console.log('üìÅ –ù–∞–π–¥–µ–Ω .vol —Ñ–∞–π–ª:', volFile.name, '–†–∞–∑–º–µ—Ä:', volFile._data.uncompressedSize, '–±–∞–π—Ç')
    
    const volData = await volFile.async('uint8array')
    console.log('üìä VolData —Ä–∞–∑–º–µ—Ä:', volData.length, '–±–∞–π—Ç')
    
    // Ensure the buffer length is even for Uint16Array
    const bufferLength = volData.length
    const alignedLength = Math.floor(bufferLength / 2) * 2
    
    if (alignedLength !== bufferLength) {
      console.warn(`‚ö†Ô∏è Buffer length ${bufferLength} is not even, truncating to ${alignedLength}`)
    }
    
    // Create a properly aligned buffer for Uint16Array
    const alignedBuffer = volData.slice(0, alignedLength)
    const volumeArray = new Uint16Array(alignedBuffer.buffer, alignedBuffer.byteOffset, alignedBuffer.byteLength / 2)
    
    console.log('üî¢ Uint16Array —Ä–∞–∑–º–µ—Ä:', volumeArray.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤')
    
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ loadOneVolumeFile
    const totalVoxels = volumeArray.length
    const size = Math.cbrt(totalVoxels)
    const dimensions = Math.round(size)
    console.log('‚úÖ –†–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–º–∞:', dimensions, '√ó', dimensions, '√ó', dimensions)
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const sortedData = [...volumeArray].sort((a, b) => a - b)
    const percentile95 = sortedData[Math.floor(sortedData.length * 0.95)]
    const percentile5 = sortedData[Math.floor(sortedData.length * 0.05)]
    const optimalThreshold = Math.max(percentile5, 100) // –ú–∏–Ω–∏–º—É–º 100
    
    console.log('üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥:', optimalThreshold, '(95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å:', percentile95, ')')
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    setThreshold(optimalThreshold)
    
    setVolumeData({
      data: volumeArray,
      width: dimensions,
      height: dimensions,
      depth: dimensions,
      metadata: {
        patientName: '–ü–∞—Ü–∏–µ–Ω—Ç',
        patientId: 'ID',
        studyDate: new Date().toISOString().split('T')[0]
      }
    })
  }

  const init3DScene = async () => {
    if (!volumeData || !containerRef.current) return

    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D —Å—Ü–µ–Ω—ã...')
      
      const THREE = await import('three')
      console.log('‚úÖ Three.js –∑–∞–≥—Ä—É–∂–µ–Ω')
      
      const { OrbitControls } = await import('three/examples/jsm/controls/OrbitControls')
      console.log('‚úÖ OrbitControls –∑–∞–≥—Ä—É–∂–µ–Ω—ã')

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ü–µ–Ω—É
      if (sceneRef.current) {
        sceneRef.current.clear()
      }

      // –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É
      const scene = new THREE.Scene()
      scene.background = new THREE.Color(0x000000)
      sceneRef.current = scene

      // –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É
      const camera = new THREE.PerspectiveCamera(
        75,
        containerRef.current.clientWidth / containerRef.current.clientHeight,
        0.1,
        1000
      )
      camera.position.set(2, 2, 2)
      cameraRef.current = camera

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
      const renderer = new THREE.WebGLRenderer({ 
        canvas: canvasRef.current,
        antialias: true,
        alpha: true
      })
      renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight)
      renderer.setPixelRatio(window.devicePixelRatio)
      rendererRef.current = renderer

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
      const controls = new OrbitControls(camera, renderer.domElement)
      controls.enableDamping = true
      controls.dampingFactor = 0.05
      controlsRef.current = controls

      // –°–æ–∑–¥–∞–µ–º 3D –º–æ–¥–µ–ª—å –∏–∑ –æ–±—ä–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      createVolumeModel(scene, volumeData)

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
      const ambientLight = new THREE.AmbientLight(0x404040, 0.6)
      scene.add(ambientLight)

      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8)
      directionalLight.position.set(1, 1, 1)
      scene.add(directionalLight)

      // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
      const animate = () => {
        requestAnimationFrame(animate)
        controls.update()
        renderer.render(scene, camera)
      }
      animate()

      console.log('‚úÖ 3D —Å—Ü–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ 3D —Å—Ü–µ–Ω—ã:', error)
      setError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ 3D —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞: ${error.message}`)
    }
  }

  const createVolumeModel = (scene: any, volumeData: VolumeData) => {
    try {
      console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ 3D –º–æ–¥–µ–ª–∏...')
      
      const THREE = require('three')
      console.log('‚úÖ Three.js –¥–æ—Å—Ç—É–ø–µ–Ω –≤ createVolumeModel')
      
      const { data, width, height, depth } = volumeData
      const geometry = new THREE.BufferGeometry()
      const positions: number[] = []
      const colors: number[] = []
      const indices: number[] = []

      // –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
      let minValue = Infinity
      let maxValue = -Infinity
      for (let i = 0; i < data.length; i++) {
        const value = data[i]
        if (value > threshold) {
          minValue = Math.min(minValue, value)
          maxValue = Math.max(maxValue, value)
        }
      }

      console.log('üìä –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π:', minValue, '-', maxValue)

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∫—Å–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const maxVoxels = 100000 // –ú–∞–∫—Å–∏–º—É–º 100k –≤–æ–∫—Å–µ–ª–µ–π
      const step = Math.max(1, Math.floor(Math.cbrt(data.length / maxVoxels)))
      
      console.log('üìè –®–∞–≥ –≤—ã–±–æ—Ä–∫–∏:', step, '–¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–æ–∫—Å–µ–ª–µ–π')

      // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–∫—Å–µ–ª—è –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ —Å —à–∞–≥–æ–º
      let vertexIndex = 0
      let voxelCount = 0
      
      for (let z = 0; z < depth && voxelCount < maxVoxels; z += step) {
        for (let y = 0; y < height && voxelCount < maxVoxels; y += step) {
          for (let x = 0; x < width && voxelCount < maxVoxels; x += step) {
            const index = z * width * height + y * width + x
            const value = data[index]

            if (value > threshold) {
              // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
              const normalizedValue = (value - minValue) / (maxValue - minValue)
              
              // –°–æ–∑–¥–∞–µ–º –∫—É–± –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–∫—Å–µ–ª—è
              const size = 0.02 * step // –†–∞–∑–º–µ—Ä –∫—É–±–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —à–∞–≥—É
              const xPos = (x - width / 2) * 0.02
              const yPos = (y - height / 2) * 0.02
              const zPos = (z - depth / 2) * 0.02

              // –°–æ–∑–¥–∞–µ–º 8 –≤–µ—Ä—à–∏–Ω –∫—É–±–∞
              const vertices = [
                xPos - size/2, yPos - size/2, zPos - size/2,
                xPos + size/2, yPos - size/2, zPos - size/2,
                xPos + size/2, yPos + size/2, zPos - size/2,
                xPos - size/2, yPos + size/2, zPos - size/2,
                xPos - size/2, yPos - size/2, zPos + size/2,
                xPos + size/2, yPos - size/2, zPos + size/2,
                xPos + size/2, yPos + size/2, zPos + size/2,
                xPos - size/2, yPos + size/2, zPos + size/2,
              ]

              // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—ã
              for (let i = 0; i < vertices.length; i += 3) {
                positions.push(vertices[i], vertices[i + 1], vertices[i + 2])
                
                // –¶–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
                const color = new THREE.Color()
                color.setHSL(0.6, 1, 0.3 + normalizedValue * 0.7)
                colors.push(color.r, color.g, color.b)
              }

              // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–Ω–∏ –∫—É–±–∞ (12 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤)
              const cubeIndices = [
                0, 1, 2, 0, 2, 3, // –ø–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
                1, 5, 6, 1, 6, 2, // –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω—å
                5, 4, 7, 5, 7, 6, // –∑–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å
                4, 0, 3, 4, 3, 7, // –ª–µ–≤–∞—è –≥—Ä–∞–Ω—å
                3, 2, 6, 3, 6, 7, // –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å
                4, 5, 1, 4, 1, 0  // –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å
              ]

              for (let i = 0; i < cubeIndices.length; i++) {
                indices.push(vertexIndex + cubeIndices[i])
              }

              vertexIndex += 8
              voxelCount++
            }
          }
        }
      }

      console.log('üî¢ –°–æ–∑–¥–∞–Ω–æ –≤–µ—Ä—à–∏–Ω:', positions.length / 3)
      console.log('üî¢ –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤:', indices.length)
      console.log('üî¢ –°–æ–∑–¥–∞–Ω–æ –≤–æ–∫—Å–µ–ª–µ–π:', voxelCount)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (positions.length === 0) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ä–æ–≥.')
        return
      }

      geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3))
      geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3))
      geometry.setIndex(indices)
      geometry.computeVertexNormals()

      const material = new THREE.MeshLambertMaterial({
        vertexColors: true,
        transparent: true,
        opacity: opacity,
        side: THREE.DoubleSide
      })

      const mesh = new THREE.Mesh(geometry, material)
      scene.add(mesh)

      console.log('‚úÖ 3D –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è 3D –º–æ–¥–µ–ª–∏:', error)
      setError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è 3D –º–æ–¥–µ–ª–∏: ${error.message}`)
    }
  }

  const renderSlice = (sliceIndex: number) => {
    if (!volumeData || !canvasRef.current) return

    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    const { data, width, height } = volumeData
    const sliceSize = width * height
    const startIndex = sliceIndex * sliceSize
    const endIndex = startIndex + sliceSize

    // –°–æ–∑–¥–∞–µ–º ImageData
    const imageData = ctx.createImageData(width, height)
    const sliceData = data.slice(startIndex, endIndex)

    // –ü—Ä–∏–º–µ–Ω—è–µ–º window/level
    const min = windowLevel - windowWidth / 2
    const max = windowLevel + windowWidth / 2

    for (let i = 0; i < sliceData.length; i++) {
      const value = sliceData[i]
      const normalized = Math.max(0, Math.min(255, ((value - min) / (max - min)) * 255))
      
      const pixelIndex = i * 4
      imageData.data[pixelIndex] = normalized     // R
      imageData.data[pixelIndex + 1] = normalized // G
      imageData.data[pixelIndex + 2] = normalized // B
      imageData.data[pixelIndex + 3] = 255       // A
    }

    // –û—á–∏—â–∞–µ–º canvas –∏ —Ä–∏—Å—É–µ–º
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    ctx.putImageData(imageData, 0, 0)
  }

  useEffect(() => {
    if (volumeData) {
      if (is3DMode) {
        init3DScene()
      } else {
        renderSlice(Math.floor(volumeData.depth / 2))
      }
    }
  }, [volumeData, is3DMode, threshold, opacity])

  useEffect(() => {
    if (isPlaying && volumeData && !is3DMode) {
      const animate = () => {
        setCurrentSlice(prev => {
          const next = (prev + 1) % volumeData.depth
          if (next === 0) setIsPlaying(false)
          return next
        })
        animationRef.current = requestAnimationFrame(animate)
      }
      animationRef.current = requestAnimationFrame(animate)
    } else if (animationRef.current) {
      cancelAnimationFrame(animationRef.current)
    }

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current)
      }
    }
  }, [isPlaying, volumeData, is3DMode])

  const handleSliderChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(event.target.value)
    setCurrentSlice(value)
  }

  const togglePlay = () => {
    setIsPlaying(!isPlaying)
  }

  const exportSlice = () => {
    if (!canvasRef.current) return
    
    const canvas = canvasRef.current
    const link = document.createElement('a')
    link.download = `slice_${currentSlice}.png`
    link.href = canvas.toDataURL()
    link.click()
  }

  const resetView = () => {
    if (controlsRef.current) {
      controlsRef.current.reset()
    }
  }

  return (
    <div className="bg-white rounded-lg shadow-lg p-6">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900 flex items-center">
          <CubeIcon className="w-8 h-8 mr-3 text-blue-600" />
          3D –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ OneVolumeViewer
        </h2>
        <div className="text-sm text-gray-500">
          –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OneVolumeViewer –∞—Ä—Ö–∏–≤—ã
        </div>
      </div>

      {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ */}
      <div className="mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          –ó–∞–≥—Ä—É–∑–∏—Ç—å OneVolumeViewer –∞—Ä—Ö–∏–≤
        </label>
        <input
          type="file"
          accept=".vol,.zip"
          onChange={handleFileUpload}
          className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
        />
        <p className="mt-1 text-xs text-gray-500">
          –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .vol —Ñ–∞–π–ª—ã –∏ .zip –∞—Ä—Ö–∏–≤—ã OneVolumeViewer
        </p>
      </div>

      {isLoading && (
        <div className="flex items-center justify-center py-8">
          <CogIcon className="w-8 h-8 animate-spin text-blue-600 mr-3" />
          <span className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...</span>
        </div>
      )}

      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
          <div className="flex items-center">
            <XCircleIcon className="w-5 h-5 text-red-600 mr-2" />
            <span className="text-red-800">{error}</span>
          </div>
        </div>
      )}

      {volumeData && (
        <div className="space-y-6">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ */}
          <div className="bg-gray-50 rounded-lg p-4">
            <h3 className="font-semibold text-gray-900 mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-500">–†–∞–∑–º–µ—Ä—ã:</span>
                <span className="ml-2 font-medium">{volumeData.width}√ó{volumeData.height}√ó{volumeData.depth}</span>
              </div>
              <div>
                <span className="text-gray-500">–ü–∞—Ü–∏–µ–Ω—Ç:</span>
                <span className="ml-2 font-medium">{volumeData.metadata.patientName}</span>
              </div>
              <div>
                <span className="text-gray-500">–†–µ–∂–∏–º:</span>
                <span className="ml-2 font-medium">{is3DMode ? '3D –ú–æ–¥–µ–ª—å' : '2D –°—Ä–µ–∑—ã'}</span>
              </div>
              <div>
                <span className="text-gray-500">–î–∞—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</span>
                <span className="ml-2 font-medium">{volumeData.metadata.studyDate}</span>
              </div>
            </div>
          </div>

          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
          <div className="flex gap-4">
            <button
              onClick={() => setIs3DMode(true)}
              className={`px-4 py-2 rounded-lg font-medium ${
                is3DMode 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              <CubeIcon className="w-5 h-5 inline mr-2" />
              3D –ú–æ–¥–µ–ª—å
            </button>
            <button
              onClick={() => setIs3DMode(false)}
              className={`px-4 py-2 rounded-lg font-medium ${
                !is3DMode 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              <EyeIcon className="w-5 h-5 inline mr-2" />
              2D –°—Ä–µ–∑—ã
            </button>
          </div>

          {/* Canvas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
          <div 
            ref={containerRef}
            className="flex justify-center bg-black rounded-lg overflow-hidden"
            style={{ height: '500px' }}
          >
            <canvas
              ref={canvasRef}
              className="w-full h-full"
            />
          </div>

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3D –º–æ–¥–µ–ª—å—é */}
          {is3DMode && (
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ü–æ—Ä–æ–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {threshold}
                </label>
                <input
                  type="range"
                  min="0"
                  max="2000"
                  value={threshold}
                  onChange={(e) => setThreshold(parseInt(e.target.value))}
                  className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {opacity.toFixed(1)}
                </label>
                <input
                  type="range"
                  min="0.1"
                  max="1"
                  step="0.1"
                  value={opacity}
                  onChange={(e) => setOpacity(parseFloat(e.target.value))}
                  className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                />
              </div>

              <div className="flex gap-4">
                <button
                  onClick={resetView}
                  className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center"
                >
                  <ArrowsPointingOutIcon className="w-4 h-4 mr-2" />
                  –°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥
                </button>
              </div>
            </div>
          )}

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2D —Å—Ä–µ–∑–∞–º–∏ */}
          {!is3DMode && (
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –°—Ä–µ–∑: {currentSlice + 1} / {volumeData.depth}
                </label>
                <input
                  type="range"
                  min="0"
                  max={volumeData.depth - 1}
                  value={currentSlice}
                  onChange={handleSliderChange}
                  className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                />
              </div>

              <div className="flex gap-4">
                <button
                  onClick={togglePlay}
                  className={`px-4 py-2 rounded-lg font-medium flex items-center ${
                    isPlaying 
                      ? 'bg-red-600 text-white hover:bg-red-700' 
                      : 'bg-green-600 text-white hover:bg-green-700'
                  }`}
                >
                  {isPlaying ? (
                    <>
                      <PauseIcon className="w-4 h-4 mr-2" />
                      –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                    </>
                  ) : (
                    <>
                      <PlayIcon className="w-4 h-4 mr-2" />
                      –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
                    </>
                  )}
                </button>

                <button
                  onClick={exportSlice}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center"
                >
                  <DocumentArrowDownIcon className="w-4 h-4 mr-2" />
                  –≠–∫—Å–ø–æ—Ä—Ç —Å—Ä–µ–∑–∞
                </button>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –£—Ä–æ–≤–µ–Ω—å –æ–∫–Ω–∞: {windowLevel}
                </label>
                <input
                  type="range"
                  min="0"
                  max="2000"
                  value={windowLevel}
                  onChange={(e) => setWindowLevel(parseInt(e.target.value))}
                  className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞: {windowWidth}
                </label>
                <input
                  type="range"
                  min="100"
                  max="3000"
                  value={windowWidth}
                  onChange={(e) => setWindowWidth(parseInt(e.target.value))}
                  className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                />
              </div>
            </div>
          )}
        </div>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-4">
        <div className="flex items-start">
          <InformationCircleIcon className="w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0" />
          <div>
            <h3 className="text-sm font-medium text-blue-900 mb-1">
              –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 3D –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫
            </h3>
            <ul className="text-sm text-blue-700 space-y-1">
              <li>‚Ä¢ <strong>3D –ú–æ–¥–µ–ª—å:</strong> –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—ä–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ 3D –º–æ–¥–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—ã—à—å –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.</li>
              <li>‚Ä¢ <strong>–ü–æ—Ä–æ–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:</strong> –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–∫—Å–µ–ª–µ–π.</li>
              <li>‚Ä¢ <strong>–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:</strong> –ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å 3D –º–æ–¥–µ–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–∑–æ—Ä–∞.</li>
              <li>‚Ä¢ <strong>2D –°—Ä–µ–∑—ã:</strong> –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ä–µ–∑—ã –æ–±—ä–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  )
} 