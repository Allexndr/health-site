'use client'

import React, { useEffect, useRef, useState, useCallback } from 'react'
import VTKEngine, { VolumeSettings, DentalPreset } from '@/lib/3d-engines/VTKEngine'
import { Button } from '@/components/ui/Button'
import { cn } from '@/lib/utils'
import { ChevronLeftIcon, ChevronRightIcon, PlayIcon, PauseIcon, CogIcon } from '@heroicons/react/24/outline'

interface VTKViewer3DProps {
  volumeData?: Uint16Array
  dimensions?: [number, number, number]
  spacing?: [number, number, number]
  patientInfo?: {
    name: string
    id: string
    studyDate: string
    modality: string
  }
  className?: string
}

export default function VTKViewer3D({
  volumeData,
  dimensions,
  spacing = [1, 1, 1],
  patientInfo,
  className
}: VTKViewer3DProps) {
  const containerRef = useRef<HTMLDivElement>(null)
  const engineRef = useRef<VTKEngine | null>(null)
  
  const [isLoading, setIsLoading] = useState(false)
  const [isInitialized, setIsInitialized] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [presets, setPresets] = useState<DentalPreset[]>([])
  const [currentPreset, setCurrentPreset] = useState('Bone')
  const [settings, setSettings] = useState<VolumeSettings>({
    windowWidth: 2000,
    windowLevel: 400,
    opacity: 0.8,
    slice: 0,
    renderMode: 'volume',
    preset: 'Bone'
  })

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VTK Engine
  useEffect(() => {
    if (!containerRef.current) return

    const initializeEngine = async () => {
      try {
        setIsLoading(true)
        setError(null)
        
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VTK Viewer...')
        const engine = new VTKEngine()
        await engine.initialize(containerRef.current!)
        
        engineRef.current = engine
        setPresets(engine.getDentalPresets())
        setIsInitialized(true)
        
        console.log('‚úÖ VTK Viewer –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é')
      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ VTK Viewer:', error)
        setError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error}`)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (containerRef.current) {
          containerRef.current.innerHTML = `
            <div style="display: flex; align-items: center; justify-content: center; height: 100%; background: linear-gradient(135deg, #1e3a8a, #3730a3); color: white; font-family: Arial, sans-serif;">
              <div style="text-align: center; padding: 40px; max-width: 500px;">
                <div style="font-size: 48px; margin-bottom: 20px;">ü¶∑</div>
                <h2 style="margin: 0 0 16px 0; color: #fbbf24;">3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h2>
                <p style="margin: 0 0 20px 0; color: #e5e7eb; line-height: 1.5;">
                  VTK.js –¥–≤–∏–∂–æ–∫ –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å WebGL.
                </p>
                <div style="background: rgba(0,0,0,0.3); padding: 16px; border-radius: 8px; margin: 20px 0;">
                  <p style="margin: 0; color: #9ca3af; font-size: 14px;">
                    <strong>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</strong><br>
                    ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5)<br>
                    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Chrome –∏–ª–∏ Firefox<br>
                    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É WebGL –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                  </p>
                </div>
                <button onclick="window.location.reload()" style="
                  background: #3b82f6; 
                  color: white; 
                  border: none; 
                  padding: 12px 24px; 
                  border-radius: 6px; 
                  cursor: pointer; 
                  font-size: 16px;
                  transition: background 0.3s;
                " onmouseover="this.style.background='#2563eb'" onmouseout="this.style.background='#3b82f6'">
                  üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                </button>
              </div>
            </div>
          `
        }
      } finally {
        setIsLoading(false)
      }
    }

    initializeEngine()

    return () => {
      if (engineRef.current) {
        engineRef.current.destroy()
      }
    }
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–º–∞ –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (!engineRef.current || !isInitialized || !volumeData || !dimensions) {
      return
    }

    const loadData = async () => {
      try {
        setIsLoading(true)
        setError(null)
        
        console.log('üìä Loading volume data into VTK...')
        await engineRef.current!.setVolumeData(volumeData, dimensions, spacing)
        
        console.log('‚úÖ Volume data loaded successfully')
      } catch (error) {
        console.error('‚ùå Failed to load volume data:', error)
        setError(`Data loading failed: ${error}`)
      } finally {
        setIsLoading(false)
      }
    }

    loadData()
  }, [volumeData, dimensions, spacing, isInitialized])

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
  const handlePresetChange = useCallback((presetName: string) => {
    if (!engineRef.current) return
    
    engineRef.current.applyDentalPreset(presetName)
    setCurrentPreset(presetName)
    setSettings(prev => ({ ...prev, preset: presetName }))
  }, [])

  // –°–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã
  const handleResetCamera = useCallback(() => {
    if (!engineRef.current) return
    
    engineRef.current.resetCamera()
  }, [])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const handleSettingsUpdate = useCallback((newSettings: Partial<VolumeSettings>) => {
    if (!engineRef.current) return
    
    const updatedSettings = { ...settings, ...newSettings }
    setSettings(updatedSettings)
    engineRef.current.updateSettings(newSettings)
  }, [settings])

  if (error) {
    return (
      <div className={cn("flex items-center justify-center h-full bg-red-50", className)}>
        <div className="text-center p-8">
          <div className="text-red-600 mb-4">
            <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ 3D –≤—å—é–≤–µ—Ä–∞</h3>
          <p className="text-gray-600 mb-4">{error}</p>
          <Button onClick={() => window.location.reload()}>
            –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className={cn("h-full flex", className)}>
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å 3D —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ */}
      <div className="flex-1 relative">
        <div ref={containerRef} className="w-full h-full" />
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {isLoading && (
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div className="text-center text-white">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4"></div>
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ 3D –¥–∞–Ω–Ω—ã—Ö...</p>
            </div>
          </div>
        )}
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ (–µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö) */}
        {!volumeData && !isLoading && (
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="text-center text-gray-500">
              <div className="w-24 h-24 mx-auto mb-4 bg-gray-200 rounded-full flex items-center justify-center">
                <svg className="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                </svg>
              </div>
              <h3 className="text-xl font-semibold mb-2">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</h3>
              <p>–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤ OneVolumeViewer –¥–ª—è –Ω–∞—á–∞–ª–∞ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</p>
            </div>
          </div>
        )}
      </div>

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      {isInitialized && (
        <div className="w-80 bg-gray-900 text-white p-4 overflow-y-auto">
          <h3 className="text-lg font-semibold mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</h3>
          
          {/* –ü—Ä–µ—Å–µ—Ç—ã */}
          <div className="mb-6">
            <label className="block text-sm font-medium mb-2">–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–µ—Å–µ—Ç—ã</label>
            <select
              value={currentPreset}
              onChange={(e) => handlePresetChange(e.target.value)}
              className="w-full p-2 rounded bg-gray-800 border border-gray-700"
            >
              {presets.map((preset) => (
                <option key={preset.name} value={preset.name}>
                  {preset.name}
                </option>
              ))}
            </select>
            <p className="text-xs text-gray-400 mt-1">
              {presets.find(p => p.name === currentPreset)?.description}
            </p>
          </div>

          {/* –†–µ–∂–∏–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ */}
          <div className="mb-6">
            <label className="block text-sm font-medium mb-2">–†–µ–∂–∏–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞</label>
            <div className="flex space-x-2">
              {(['volume', 'slice', 'mip'] as const).map((mode) => (
                <button
                  key={mode}
                  onClick={() => handleSettingsUpdate({ renderMode: mode })}
                  className={cn(
                    "px-3 py-1 rounded text-sm",
                    settings.renderMode === mode
                      ? "bg-blue-600 text-white"
                      : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                  )}
                >
                  {mode === 'volume' ? '3D' : mode === 'slice' ? '–°–ª–∞–π—Å—ã' : 'MIP'}
                </button>
              ))}
            </div>
          </div>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ */}
          <div className="mb-6">
            <label className="block text-sm font-medium mb-2">
              –®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞: {settings.windowWidth}
            </label>
            <input
              type="range"
              min="100"
              max="4000"
              value={settings.windowWidth}
              onChange={(e) => handleSettingsUpdate({ windowWidth: parseInt(e.target.value) })}
              className="w-full"
            />
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium mb-2">
              –£—Ä–æ–≤–µ–Ω—å –æ–∫–Ω–∞: {settings.windowLevel}
            </label>
            <input
              type="range"
              min="-1000"
              max="2000"
              value={settings.windowLevel}
              onChange={(e) => handleSettingsUpdate({ windowLevel: parseInt(e.target.value) })}
              className="w-full"
            />
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium mb-2">
              –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {Math.round(settings.opacity * 100)}%
            </label>
            <input
              type="range"
              min="0"
              max="1"
              step="0.01"
              value={settings.opacity}
              onChange={(e) => handleSettingsUpdate({ opacity: parseFloat(e.target.value) })}
              className="w-full"
            />
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã */}
          <Button
            onClick={handleResetCamera}
            className="w-full mb-4"
            variant="secondary"
          >
            –°–±—Ä–æ—Å–∏—Ç—å –∫–∞–º–µ—Ä—É
          </Button>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö */}
          {volumeData && dimensions && (
            <div className="mt-6 p-3 bg-gray-800 rounded">
              <h4 className="text-sm font-medium mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö</h4>
              <div className="text-xs text-gray-300 space-y-1">
                <div>–†–∞–∑–º–µ—Ä—ã: {Array.isArray(dimensions) ? dimensions.join(' √ó ') : `${dimensions.x} √ó ${dimensions.y} √ó ${dimensions.z}`}</div>
                <div>–í–æ–∫—Å–µ–ª–µ–π: {volumeData.length.toLocaleString()}</div>
                <div>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {spacing[0]}mm</div>
                {patientInfo && (
                  <>
                    <div>–ü–∞—Ü–∏–µ–Ω—Ç: {patientInfo.name}</div>
                    <div>–î–∞—Ç–∞: {patientInfo.studyDate}</div>
                  </>
                )}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  )
} 
 
 