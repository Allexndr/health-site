export interface VolumeSettings {
  windowWidth: number
  windowLevel: number
  opacity: number
  slice: number
  renderMode: 'volume' | 'slice' | 'mip'
  preset: string
}

export interface DentalPreset {
  name: string
  windowWidth: number
  windowLevel: number
  colorTransfer: Array<[number, number, number, number]>
  opacityTransfer: Array<[number, number]>
  description: string
}

class VTKEngine {
  private renderer: any
  private renderWindow: any
  private volumeActor: any
  private imageData: any
  private container: HTMLElement | null = null
  private isInitialized = false
  private vtkModules: any = {}
  private initializationAttempts = 0
  private maxAttempts = 3

  private dentalPresets: DentalPreset[] = [
    {
      name: 'Bone',
      windowWidth: 2000,
      windowLevel: 400,
      colorTransfer: [
        [0, 0.0, 0.0, 0.0],
        [400, 0.8, 0.8, 0.9],
        [1000, 1.0, 1.0, 1.0],
        [2000, 1.0, 1.0, 1.0]
      ],
      opacityTransfer: [
        [0, 0.0],
        [400, 0.1],
        [800, 0.8],
        [2000, 1.0]
      ],
      description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Å—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏ –∏ –∑—É–±–æ–≤'
    },
    {
      name: 'Soft Tissue',
      windowWidth: 400,
      windowLevel: 40,
      colorTransfer: [
        [-100, 0.0, 0.0, 0.0],
        [0, 0.5, 0.3, 0.3],
        [100, 0.9, 0.7, 0.6],
        [300, 1.0, 1.0, 1.0]
      ],
      opacityTransfer: [
        [-100, 0.0],
        [0, 0.3],
        [100, 0.7],
        [300, 1.0]
      ],
      description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º—è–≥–∫–∏—Ö —Ç–∫–∞–Ω–µ–π'
    }
  ]

  constructor() {
    console.log('üîß VTKEngine constructor called')
  }

  private async loadVTKModulesSafely(): Promise<boolean> {
    try {
      console.log(`üöÄ VTK.js –∑–∞–≥—Ä—É–∑–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${this.initializationAttempts + 1}/${this.maxAttempts})...`)
      
      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º FullScreenRenderWindow...')
      const vtkFullScreenRenderWindow = await import('@kitware/vtk.js/Rendering/Misc/FullScreenRenderWindow')
      if (!vtkFullScreenRenderWindow.default) {
        throw new Error('FullScreenRenderWindow module failed to load')
      }
      console.log('‚úÖ FullScreenRenderWindow –∑–∞–≥—Ä—É–∂–µ–Ω')

      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º ImageData...')
      const vtkImageData = await import('@kitware/vtk.js/Common/DataModel/ImageData')
      if (!vtkImageData.default) {
        throw new Error('ImageData module failed to load')
      }
      console.log('‚úÖ ImageData –∑–∞–≥—Ä—É–∂–µ–Ω')

      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º DataArray...')
      const vtkDataArray = await import('@kitware/vtk.js/Common/Core/DataArray')
      if (!vtkDataArray.default) {
        throw new Error('DataArray module failed to load')
      }
      console.log('‚úÖ DataArray –∑–∞–≥—Ä—É–∂–µ–Ω')

      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º Volume...')
      const vtkVolume = await import('@kitware/vtk.js/Rendering/Core/Volume')
      if (!vtkVolume.default) {
        throw new Error('Volume module failed to load')
      }
      console.log('‚úÖ Volume –∑–∞–≥—Ä—É–∂–µ–Ω')

      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º VolumeMapper...')
      const vtkVolumeMapper = await import('@kitware/vtk.js/Rendering/Core/VolumeMapper')
      if (!vtkVolumeMapper.default) {
        throw new Error('VolumeMapper module failed to load')
      }
      console.log('‚úÖ VolumeMapper –∑–∞–≥—Ä—É–∂–µ–Ω')

      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º ColorTransferFunction...')
      const vtkColorTransferFunction = await import('@kitware/vtk.js/Rendering/Core/ColorTransferFunction')
      if (!vtkColorTransferFunction.default) {
        throw new Error('ColorTransferFunction module failed to load')
      }
      console.log('‚úÖ ColorTransferFunction –∑–∞–≥—Ä—É–∂–µ–Ω')

      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º PiecewiseFunction...')
      const vtkPiecewiseFunction = await import('@kitware/vtk.js/Common/DataModel/PiecewiseFunction')
      if (!vtkPiecewiseFunction.default) {
        throw new Error('PiecewiseFunction module failed to load')
      }
      console.log('‚úÖ PiecewiseFunction –∑–∞–≥—Ä—É–∂–µ–Ω')

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥—É–ª–∏
      this.vtkModules = {
        vtkFullScreenRenderWindow: vtkFullScreenRenderWindow.default,
        vtkImageData: vtkImageData.default,
        vtkDataArray: vtkDataArray.default,
        vtkVolume: vtkVolume.default,
        vtkVolumeMapper: vtkVolumeMapper.default,
        vtkColorTransferFunction: vtkColorTransferFunction.default,
        vtkPiecewiseFunction: vtkPiecewiseFunction.default
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
      console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è VTK –º–æ–¥—É–ª–µ–π...')
      
      if (typeof this.vtkModules.vtkFullScreenRenderWindow?.newInstance !== 'function') {
        throw new Error('vtkFullScreenRenderWindow.newInstance –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π')
      }
      
      if (typeof this.vtkModules.vtkImageData?.newInstance !== 'function') {
        throw new Error('vtkImageData.newInstance –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π')
      }
      
      if (typeof this.vtkModules.vtkDataArray?.newInstance !== 'function') {
        throw new Error('vtkDataArray.newInstance –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π')
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
      await new Promise(resolve => setTimeout(resolve, 100))

      console.log('‚úÖ –í—Å–µ VTK –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã')
      return true

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ VTK –º–æ–¥—É–ª–µ–π (–ø–æ–ø—ã—Ç–∫–∞ ${this.initializationAttempts + 1}):`, error)
      return false
    }
  }

  async initialize(container: HTMLElement): Promise<void> {
    if (this.isInitialized) {
      console.log('‚úÖ VTK Engine —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
      return
    }

    this.initializationAttempts++
    
    if (this.initializationAttempts > this.maxAttempts) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å VTK Engine –ø–æ—Å–ª–µ ${this.maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`)
    }

    try {
      console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VTK Engine (–ø–æ–ø—ã—Ç–∫–∞ ${this.initializationAttempts})...`)
      this.container = container

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º WebGL –ø–æ–¥–¥–µ—Ä–∂–∫—É
      const canvas = document.createElement('canvas')
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl')
      if (!gl) {
        throw new Error('WebGL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ')
      }
      console.log('‚úÖ WebGL –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')

      // –ó–∞–≥—Ä—É–∂–∞–µ–º VTK –º–æ–¥—É–ª–∏
      const modulesLoaded = await this.loadVTKModulesSafely()
      if (!modulesLoaded) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å VTK.js –º–æ–¥—É–ª–∏')
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è vtkFullScreenRenderWindow:', {
        exists: !!this.vtkModules.vtkFullScreenRenderWindow,
        hasNewInstance: this.vtkModules.vtkFullScreenRenderWindow?.newInstance,
        type: typeof this.vtkModules.vtkFullScreenRenderWindow?.newInstance,
        keys: this.vtkModules.vtkFullScreenRenderWindow ? Object.keys(this.vtkModules.vtkFullScreenRenderWindow) : 'no keys'
      })
      
      if (!this.vtkModules.vtkFullScreenRenderWindow || 
          typeof this.vtkModules.vtkFullScreenRenderWindow.newInstance !== 'function') {
        throw new Error(`vtkFullScreenRenderWindow –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: ${this.vtkModules.vtkFullScreenRenderWindow ? Object.keys(this.vtkModules.vtkFullScreenRenderWindow).join(', ') : 'none'}`)
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
      console.log('üñ•Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ VTK —Ä–µ–Ω–¥–µ—Ä–∞...')
      
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      container.innerHTML = ''
      
      const fullScreenRenderer = this.vtkModules.vtkFullScreenRenderWindow.newInstance({
        background: [0.1, 0.1, 0.1],
        container: container,
        listenWindowResize: true
      })

      if (!fullScreenRenderer) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å FullScreenRenderWindow')
      }

      this.renderer = fullScreenRenderer.getRenderer()
      this.renderWindow = fullScreenRenderer.getRenderWindow()

      if (!this.renderer || !this.renderWindow) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å renderer –∏–ª–∏ renderWindow')
      }

      // –°–æ–∑–¥–∞–µ–º volume actor —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
      console.log('üßä –°–æ–∑–¥–∞–Ω–∏–µ volume actor...')
      
      if (!this.vtkModules.vtkVolume || typeof this.vtkModules.vtkVolume.newInstance !== 'function') {
        throw new Error('vtkVolume –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é')
      }

      this.volumeActor = this.vtkModules.vtkVolume.newInstance()
      const mapper = this.vtkModules.vtkVolumeMapper.newInstance()
      
      if (!this.volumeActor || !mapper) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å volume actor –∏–ª–∏ mapper')
      }
      
      mapper.setSampleDistance(1.0)
      this.volumeActor.setMapper(mapper)

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
      this.renderer.addVolume(this.volumeActor)

      // –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      this.renderWindow.render()

      this.isInitialized = true
      console.log('‚úÖ VTK Engine —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!')

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VTK Engine (–ø–æ–ø—ã—Ç–∫–∞ ${this.initializationAttempts}):`, error)
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
      this.isInitialized = false
      if (this.container) {
        this.container.innerHTML = `
          <div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #1a1a1a; color: white; font-family: Arial;">
            <div style="text-align: center; padding: 20px;">
              <div style="color: #ef4444; margin-bottom: 16px;">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VTK.js</div>
              <div style="font-size: 14px; color: #9ca3af; margin-bottom: 16px;">–ü–æ–ø—ã—Ç–∫–∞ ${this.initializationAttempts} –∏–∑ ${this.maxAttempts}</div>
              <div style="font-size: 12px; color: #6b7280;">${error.message}</div>
            </div>
          </div>
        `
      }
      
      if (this.initializationAttempts < this.maxAttempts) {
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`)
        setTimeout(() => {
          this.initialize(container).catch(console.error)
        }, 2000)
        return
      }
      
      throw new Error(`VTK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: ${error.message}`)
    }
  }

  async setVolumeData(
    data: Uint16Array,
    dimensions: [number, number, number],
    spacing: [number, number, number] = [1, 1, 1]
  ): Promise<void> {
    if (!this.isInitialized) {
      throw new Error('VTK Engine –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }

    try {
      console.log('üìä –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–º–∞:', {
        dataLength: data.length,
        dimensions,
        spacing,
        expectedVoxels: dimensions[0] * dimensions[1] * dimensions[2]
      })

      // –°–æ–∑–¥–∞–µ–º VTK ImageData
      this.imageData = this.vtkModules.vtkImageData.newInstance({
        spacing: spacing,
        origin: [0, 0, 0],
        direction: [1, 0, 0, 0, 1, 0, 0, 0, 1]
      })

      this.imageData.setDimensions(dimensions)

      // –°–æ–∑–¥–∞–µ–º DataArray –∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      const dataArray = this.vtkModules.vtkDataArray.newInstance({
        name: 'scalars',
        numberOfComponents: 1,
        values: data
      })

      this.imageData.getPointData().setScalars(dataArray)

      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ mapper
      const mapper = this.volumeActor.getMapper()
      mapper.setInputData(this.imageData)

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è –∫–æ—Å—Ç–µ–π
      this.applyDentalPreset('Bone')

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É
      this.renderer.resetCamera()
      this.renderWindow.render()

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–º–∞:', error)
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–º–∞: ${error.message}`)
    }
  }

  applyDentalPreset(presetName: string): void {
    const preset = this.dentalPresets.find(p => p.name === presetName)
    if (!preset) {
      console.warn(`–ü—Ä–µ—Å–µ—Ç ${presetName} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return
    }

    try {
      // –°–æ–∑–¥–∞–µ–º color transfer function
      const colorFunction = this.vtkModules.vtkColorTransferFunction.newInstance()
      preset.colorTransfer.forEach(([value, r, g, b]) => {
        colorFunction.addRGBPoint(value, r, g, b)
      })

      // –°–æ–∑–¥–∞–µ–º opacity function
      const opacityFunction = this.vtkModules.vtkPiecewiseFunction.newInstance()
      preset.opacityTransfer.forEach(([value, opacity]) => {
        opacityFunction.addPoint(value, opacity)
      })

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∞–∫—Ç–æ—Ä—É
      this.volumeActor.getProperty().setRGBTransferFunction(0, colorFunction)
      this.volumeActor.getProperty().setScalarOpacity(0, opacityFunction)

      console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç: ${presetName}`)
      
      this.renderWindow.render()
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞:', error)
    }
  }

  updateSettings(settings: Partial<VolumeSettings>): void {
    if (!this.isInitialized) return

    try {
      if (settings.preset) {
        this.applyDentalPreset(settings.preset)
      }

      this.renderWindow.render()
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error)
    }
  }

  resetCamera(): void {
    if (this.renderer) {
      this.renderer.resetCamera()
      this.renderWindow.render()
    }
  }

  render(): void {
    if (this.renderWindow) {
      this.renderWindow.render()
    }
  }

  destroy(): void {
    if (this.container) {
      this.container.innerHTML = ''
    }
    this.isInitialized = false
    this.initializationAttempts = 0
  }

  getIsInitialized(): boolean {
    return this.isInitialized
  }

  getDentalPresets(): DentalPreset[] {
    return this.dentalPresets
  }
}

export default VTKEngine 
 