/**
 * VolumeViewer3D - –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –æ–±—ä–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ API Three.js
 */

import * as THREE from 'three'
import { OrbitControls } from 'three-stdlib'
import JSZip from 'jszip'

export interface VolumeData {
  width: number
  height: number
  depth: number
  data: Uint16Array
  spacing: [number, number, number]
  origin: [number, number, number]
}

export interface VolumeSettings {
  windowLevel: number
  windowWidth: number
  opacity: number
  renderMode: 'mip' | 'volume' | 'isosurface'
  threshold: number
  colormap: 'bone' | 'hot' | 'cool' | 'gray'
}

export class VolumeViewer3D {
  private container: HTMLElement
  private scene: THREE.Scene
  private camera: THREE.PerspectiveCamera
  private renderer: THREE.WebGLRenderer
  private controls: OrbitControls
  private volumeGroup: THREE.Group
  private currentVolume: VolumeData | null = null
  private sliceMeshes: THREE.Mesh[] = []
  private settings: VolumeSettings = {
    windowLevel: 0.7,     // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –∫–æ—Å—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏
    windowWidth: 0.5,     // –°—É–∂–∞–µ–º –æ–∫–Ω–æ –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
    opacity: 0.9,         // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    renderMode: 'volume',
    threshold: 0.4,       // –ü–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º—è–≥–∫–∏—Ö —Ç–∫–∞–Ω–µ–π
    colormap: 'bone'
  }

  constructor(container: HTMLElement) {
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ VolumeViewer3D...')
    console.log('üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:', {
      element: container,
      dimensions: {
        width: container.clientWidth,
        height: container.clientHeight,
        offsetWidth: container.offsetWidth,
        offsetHeight: container.offsetHeight
      }
    })
    
    this.container = container
    
    try {
      this.initThreeJS()
      this.setupEventListeners()
      console.log('‚úÖ VolumeViewer3D –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ VolumeViewer3D:', error)
      throw error
    }
  }

  private initThreeJS(): void {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Three.js...')
    
    try {
      // –°—Ü–µ–Ω–∞
      console.log('  üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã...')
      this.scene = new THREE.Scene()
      this.scene.background = new THREE.Color(0x000000)
      console.log('  ‚úÖ –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞')

      // –ö–∞–º–µ—Ä–∞
      console.log('  üìπ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã...')
      const width = this.container.clientWidth || 800
      const height = this.container.clientHeight || 600
      console.log(`  üìê –†–∞–∑–º–µ—Ä—ã: ${width}x${height}`)
      
      this.camera = new THREE.PerspectiveCamera(
        75,
        width / height,
        0.1,
        1000
      )
      this.camera.position.set(100, 100, 100)
      this.camera.lookAt(0, 0, 0)
      console.log('  ‚úÖ –ö–∞–º–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞')

      // –†–µ–Ω–¥–µ—Ä–µ—Ä
      console.log('  üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞...')
      this.renderer = new THREE.WebGLRenderer({ 
        antialias: true,
        alpha: true 
      })
      
      console.log('  üìè –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞...')
      this.renderer.setSize(width, height)
      this.renderer.setPixelRatio(window.devicePixelRatio)
      
      console.log('  üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ DOM...')
      this.container.appendChild(this.renderer.domElement)
      console.log('  ‚úÖ –†–µ–Ω–¥–µ—Ä–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω')

      // –ö–æ–Ω—Ç—Ä–æ–ª—ã
      console.log('  üïπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤...')
      this.controls = new OrbitControls(this.camera, this.renderer.domElement)
      this.controls.enableDamping = true
      this.controls.dampingFactor = 0.05
      console.log('  ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—ã —Å–æ–∑–¥–∞–Ω—ã')

      // –û—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
      console.log('  üí° –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è...')
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.4)
      this.scene.add(ambientLight)
      
      // –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ç–∞
      const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8)
      directionalLight1.position.set(100, 100, 100)
      directionalLight1.castShadow = false
      this.scene.add(directionalLight1)
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –≥–ª—É–±–∏–Ω—ã
      const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.4)
      directionalLight2.position.set(-50, 50, -50)
      this.scene.add(directionalLight2)
      
      // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–Ω–∏–∑—É –¥–ª—è –∑—É–±–æ–≤
      const directionalLight3 = new THREE.DirectionalLight(0xffffff, 0.3)
      directionalLight3.position.set(0, -100, 0)
      this.scene.add(directionalLight3)
      console.log('  ‚úÖ –û—Å–≤–µ—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ')

      // –ì—Ä—É–ø–ø–∞ –¥–ª—è –æ–±—ä–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      console.log('  üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–º–æ–≤...')
      this.volumeGroup = new THREE.Group()
      this.scene.add(this.volumeGroup)
      console.log('  ‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞')

      // –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—É–± –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      console.log('  üß™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É–±–∞...')
      const testGeometry = new THREE.BoxGeometry(50, 50, 50)
      const testMaterial = new THREE.MeshLambertMaterial({ color: 0x44aa88, wireframe: true })
      const testCube = new THREE.Mesh(testGeometry, testMaterial)
      this.scene.add(testCube)
      console.log('  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫—É–± –¥–æ–±–∞–≤–ª–µ–Ω')

      console.log('  üé¨ –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏...')
      this.animate()
      console.log('‚úÖ Three.js –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ initThreeJS:', error)
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Three.js: ${error.message}`)
    }
  }

  public async loadVolumeFile(file: File): Promise<void> {
    console.log('ü¶∑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–º–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', file.name)
    
    try {
      const arrayBuffer = await file.arrayBuffer()
      
      if (file.name.endsWith('.zip')) {
        await this.loadZipVolume(arrayBuffer)
      } else {
        await this.loadRawVolume(arrayBuffer)
      }
      
      console.log('‚úÖ –û–±—ä–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
      throw error
    }
  }

  private async loadZipVolume(buffer: ArrayBuffer): Promise<void> {
    const zip = new JSZip()
    const zipFile = await zip.loadAsync(buffer)
    
    console.log('üì¶ –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞ OneVolumeViewer...')
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ
    const allFiles: Array<{name: string, size: number, type: string}> = []
    
    for (const [filename, file] of Object.entries(zipFile.files)) {
      if (!file.dir) {
        const size = file._data?.uncompressedSize || 0
        const extension = filename.split('.').pop()?.toLowerCase() || ''
        
        allFiles.push({
          name: filename,
          size: size,
          type: extension
        })
        
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${filename} (${(size / 1024 / 1024).toFixed(2)} –ú–ë) [${extension}]`)
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É - —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–±—ä–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    allFiles.sort((a, b) => b.size - a.size)
    
    // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –æ–±—ä–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    let volumeData: ArrayBuffer | null = null
    let metadata: any = {}
    let selectedFile: string = ''
    
    // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é)
    for (const fileInfo of allFiles) {
      const filename = fileInfo.name
      const extension = fileInfo.type
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (['vol', 'raw', 'dat', 'bin', 'img', 'dcm', 'dicom'].includes(extension) ||
          filename.includes('volume') || 
          filename.includes('data') ||
          fileInfo.size > 1024 * 1024) { // –§–∞–π–ª—ã –±–æ–ª—å—à–µ 1 –ú–ë
        
        console.log(`üéØ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑: ${filename}`)
        
        try {
          const file = zipFile.files[filename]
          volumeData = await file.async('arraybuffer')
          selectedFile = filename
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑: ${filename} (${(volumeData.byteLength / 1024 / 1024).toFixed(2)} –ú–ë)`)
          break
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${filename}:`, error)
          continue
        }
      }
    }
    
    // –ü–æ–∏—Å–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    for (const [filename, file] of Object.entries(zipFile.files)) {
      if (filename.includes('meta') || 
          filename.includes('info') ||
          filename.includes('header') ||
          filename.includes('ver_ctrl') ||
          filename.endsWith('.txt') || 
          filename.endsWith('.inf') ||
          filename.endsWith('.hdr')) {
        
        try {
          const text = await file.async('string')
          console.log(`üìã –ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ ${filename}:`)
          console.log(text.substring(0, 200) + (text.length > 200 ? '...' : ''))
          
          const parsedMeta = this.parseMetadata(text)
          metadata = { ...metadata, ...parsedMeta }
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ ${filename}:`, error)
        }
      }
    }
    
    if (volumeData) {
      console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', metadata)
      
      // –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      if (!metadata.width && !metadata.height && !metadata.depth) {
        console.log('ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤...')
        const estimatedDims = this.estimateDimensions(volumeData.byteLength)
        metadata = {
          width: estimatedDims.width,
          height: estimatedDims.height,
          depth: estimatedDims.depth,
          spacing_x: 0.125,
          spacing_y: 0.125,
          spacing_z: 0.125,
          source: 'auto-detected'
        }
      }
      
      const volume = this.processVolumeData(volumeData, metadata)
      this.renderVolume(volume)
      this.create2DSlices(volume)
    } else {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—ä–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∞—Ä—Ö–∏–≤–µ!')
      console.log('üìã –í—Å–µ —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ:')
      allFiles.forEach(file => {
        console.log(`  - ${file.name} (${file.size} –±–∞–π—Ç, .${file.type})`)
      })
    }
  }

  private async loadRawVolume(buffer: ArrayBuffer): Promise<void> {
    // –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    const totalBytes = buffer.byteLength
    const possibleDimensions = this.estimateDimensions(totalBytes)
    
    const volume = this.processVolumeData(buffer, {
      width: possibleDimensions.width,
      height: possibleDimensions.height,
      depth: possibleDimensions.depth,
      spacing: [0.125, 0.125, 0.125] // –¢–∏–ø–∏—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö CT
    })
    
    this.renderVolume(volume)
    this.create2DSlices(volume)
  }

  private parseMetadata(text: string): any {
    const metadata: any = {}
    const lines = text.split('\n')
    
    console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...')
    
    for (const line of lines) {
      const trimmedLine = line.trim()
      if (!trimmedLine || trimmedLine.startsWith('#')) continue
      
      // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
      let key: string = ''
      let value: string = ''
      
      if (trimmedLine.includes('=')) {
        [key, value] = trimmedLine.split('=', 2).map(s => s.trim())
      } else if (trimmedLine.includes(':')) {
        [key, value] = trimmedLine.split(':', 2).map(s => s.trim())
      } else if (trimmedLine.includes('\t')) {
        [key, value] = trimmedLine.split('\t', 2).map(s => s.trim())
      } else if (trimmedLine.includes(' ')) {
        const parts = trimmedLine.split(' ')
        if (parts.length >= 2) {
          key = parts[0]
          value = parts.slice(1).join(' ').trim()
        }
      }
      
      if (key && value) {
        const lowerKey = key.toLowerCase()
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á–∏
        if (lowerKey.includes('width') || lowerKey.includes('—Ä–∞–∑–º–µ—Ä') || lowerKey === 'x' || lowerKey === 'nx') {
          metadata.width = parseInt(value) || metadata.width
        } else if (lowerKey.includes('height') || lowerKey.includes('–≤—ã—Å–æ—Ç–∞') || lowerKey === 'y' || lowerKey === 'ny') {
          metadata.height = parseInt(value) || metadata.height
        } else if (lowerKey.includes('depth') || lowerKey.includes('–≥–ª—É–±–∏–Ω–∞') || lowerKey === 'z' || lowerKey === 'nz' || lowerKey.includes('slice')) {
          metadata.depth = parseInt(value) || metadata.depth
        } else if (lowerKey.includes('spacing') || lowerKey.includes('voxel') || lowerKey.includes('—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ')) {
          const spacing = parseFloat(value)
          if (spacing > 0) {
            if (lowerKey.includes('x')) metadata.spacing_x = spacing
            else if (lowerKey.includes('y')) metadata.spacing_y = spacing
            else if (lowerKey.includes('z')) metadata.spacing_z = spacing
            else {
              // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –æ—Å—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ –≤—Å–µ–º
              metadata.spacing_x = spacing
              metadata.spacing_y = spacing
              metadata.spacing_z = spacing
            }
          }
        } else if (lowerKey.includes('format') || lowerKey.includes('type') || lowerKey.includes('datatype')) {
          metadata.datatype = value
        } else if (lowerKey.includes('endian') || lowerKey.includes('byte')) {
          metadata.byteOrder = value
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        metadata[key] = value
        
        console.log(`  ${key}: ${value}`)
      }
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ä—ã –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const numberPattern = /(\d+)/g
    const numbers = text.match(numberPattern)?.map(n => parseInt(n)).filter(n => n > 0 && n < 10000) || []
    
    if (!metadata.width && !metadata.height && !metadata.depth && numbers.length >= 3) {
      console.log('üîç –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ä–∞–∑–º–µ—Ä—ã –∏–∑ —á–∏—Å–µ–ª:', numbers)
      
      // –ò—â–µ–º —Ç—Ä–æ–π–∫–∏ —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—Ä–∞–º–∏
      for (let i = 0; i <= numbers.length - 3; i++) {
        const [w, h, d] = numbers.slice(i, i + 3)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤
        if (w >= 64 && w <= 2048 && h >= 64 && h <= 2048 && d >= 32 && d <= 1024) {
          metadata.width = w
          metadata.height = h
          metadata.depth = d
          metadata.source = 'extracted-from-numbers'
          console.log(`üìê –ò–∑–≤–ª–µ—á–µ–Ω—ã —Ä–∞–∑–º–µ—Ä—ã: ${w}√ó${h}√ó${d}`)
          break
        }
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!metadata.spacing_x) metadata.spacing_x = 0.125
    if (!metadata.spacing_y) metadata.spacing_y = 0.125
    if (!metadata.spacing_z) metadata.spacing_z = 0.125
    
    return metadata
  }

  private estimateDimensions(totalBytes: number): { width: number, height: number, depth: number } {
    console.log(`üî¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è ${totalBytes} –±–∞–π—Ç...`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    const possibleDataTypes = [
      { bytesPerVoxel: 2, name: 'Uint16' },      // 16-bit
      { bytesPerVoxel: 1, name: 'Uint8' },       // 8-bit  
      { bytesPerVoxel: 4, name: 'Float32' },     // 32-bit float
      { bytesPerVoxel: 4, name: 'Uint32' }       // 32-bit int
    ]
    
    const results: Array<{width: number, height: number, depth: number, dataType: string, confidence: number}> = []
    
    for (const dataType of possibleDataTypes) {
      const totalVoxels = Math.floor(totalBytes / dataType.bytesPerVoxel)
      
      if (totalVoxels <= 0) continue
      
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö CT —Å–∫–∞–Ω–µ—Ä–æ–≤
      const commonDentalSizes = [
        { width: 512, height: 512 },  // –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        { width: 400, height: 400 },  // –°—Ä–µ–¥–Ω–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ  
        { width: 256, height: 256 },  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        { width: 200, height: 200 },  // Compact —Ä–∞–∑–º–µ—Ä
        { width: 384, height: 384 },  // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∫–∞–Ω–µ—Ä—ã
        { width: 320, height: 320 },  // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å–∫–∞–Ω–µ—Ä—ã
        { width: 128, height: 128 }   // –ù–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
      ]
      
      for (const size of commonDentalSizes) {
        const calculatedDepth = Math.floor(totalVoxels / (size.width * size.height))
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –≥–ª—É–±–∏–Ω—ã –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if (calculatedDepth >= 32 && calculatedDepth <= 1024) {
          // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
          let confidence = 0
          
          // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º 16-–±–∏—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤ CT)
          if (dataType.name === 'Uint16') confidence += 40
          else if (dataType.name === 'Uint8') confidence += 20
          else confidence += 10
          
          // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
          if (size.width === 512 && size.height === 512) confidence += 30
          else if (size.width === 400 && size.height === 400) confidence += 25
          else if (size.width === 256 && size.height === 256) confidence += 20
          else confidence += 10
          
          // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ä–∞–∑—É–º–Ω—É—é –≥–ª—É–±–∏–Ω—É (—Ç–∏–ø–∏—á–Ω–∞—è –¥–ª—è –¥–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö CT)
          if (calculatedDepth >= 128 && calculatedDepth <= 512) confidence += 20
          else if (calculatedDepth >= 64 && calculatedDepth <= 256) confidence += 15
          else confidence += 5
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–ª–∏—Ç—Å—è –ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–∞—Ü–µ–ª–æ
          if (totalVoxels % (size.width * size.height) === 0) confidence += 15
          
          results.push({
            width: size.width,
            height: size.height,
            depth: calculatedDepth,
            dataType: dataType.name,
            confidence: confidence
          })
          
          console.log(`  üìê –í–∞—Ä–∏–∞–Ω—Ç: ${size.width}√ó${size.height}√ó${calculatedDepth} [${dataType.name}] - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${confidence}%`)
        }
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    results.sort((a, b) => b.confidence - a.confidence)
    
    if (results.length > 0) {
      const best = results[0]
      console.log(`‚úÖ –í—ã–±—Ä–∞–Ω—ã —Ä–∞–∑–º–µ—Ä—ã: ${best.width}√ó${best.height}√ó${best.depth} [${best.dataType}] —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ${best.confidence}%`)
      return { width: best.width, height: best.height, depth: best.depth }
    }
    
    // Fallback –∫ –∫—É–±–∏—á–µ—Å–∫–æ–º—É –æ–±—ä–µ–º—É –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫ –∫—É–±–∏—á–µ—Å–∫–æ–º—É –æ–±—ä–µ–º—É')
    const totalVoxels = Math.floor(totalBytes / 2) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 16-bit
    const cubeSize = Math.round(Math.cbrt(totalVoxels))
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏ 2 –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const roundedSize = Math.pow(2, Math.round(Math.log2(cubeSize)))
    
    return { 
      width: Math.min(512, roundedSize), 
      height: Math.min(512, roundedSize), 
      depth: Math.floor(totalVoxels / (Math.min(512, roundedSize) * Math.min(512, roundedSize)))
    }
  }

  private processVolumeData(buffer: ArrayBuffer, metadata: any): VolumeData {
    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${buffer.byteLength} –±–∞–π—Ç`)
    console.log(`üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`, metadata)
    
    // –î–ª—è OneVolumeViewer –∞—Ä—Ö–∏–≤–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    let width = metadata.width || 512
    let height = metadata.height || 512
    let depth = metadata.depth || Math.floor(buffer.byteLength / (width * height * 2))
    
    // –ï—Å–ª–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OneVolumeViewer
    if (metadata.PixelSpacing || metadata.Comment) {
      console.log(`ü¶∑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OneVolumeViewer`)
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      const comment = metadata.Comment || metadata.Attendant || ''
      
      // –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
      const volumeRadiusMatch = comment.match(/VOLUME_RADIUS:(\d+)/)
      const pixelMatch = comment.match(/PIXEL:(\d+\.?\d*)um/)
      const magMatch = comment.match(/MAG:(\d+\.?\d*)/)
      
      if (volumeRadiusMatch) {
        const radius = parseInt(volumeRadiusMatch[1])
        console.log(`üìè –ù–∞–π–¥–µ–Ω —Ä–∞–¥–∏—É—Å –æ–±—ä–µ–º–∞: ${radius}`)
        
        // –î–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö CT —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—É–±–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥—è—Ç –ª–∏ –Ω–∞—à–∏ —Ä–∞–∑–º–µ—Ä—ã
        const estimatedSize = radius * 2
        if (estimatedSize >= 64 && estimatedSize <= 512) {
          width = height = depth = estimatedSize
          console.log(`üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–¥–∏—É—Å–∞: ${width}√ó${height}√ó${depth}`)
        }
      }
      
      if (pixelMatch) {
        const pixelSize = parseFloat(pixelMatch[1]) / 1000 // –º–∏–∫—Ä–æ–Ω—ã –≤ –º–º
        metadata.spacing_x = metadata.spacing_y = metadata.spacing_z = pixelSize
        console.log(`üî¨ –†–∞–∑–º–µ—Ä –ø–∏–∫—Å–µ–ª—è: ${pixelSize} –º–º`)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
    const expectedBytes = width * height * depth * 2 // 16-bit –¥–∞–Ω–Ω—ã–µ
    const actualBytes = buffer.byteLength
    
    console.log(`üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤:`)
    console.log(`  - –û–∂–∏–¥–∞–µ–º–æ: ${expectedBytes} –±–∞–π—Ç –¥–ª—è ${width}√ó${height}√ó${depth}`)
    console.log(`  - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: ${actualBytes} –±–∞–π—Ç`)
    console.log(`  - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${(actualBytes / expectedBytes).toFixed(2)}`)
    
    // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if (Math.abs(actualBytes - expectedBytes) > expectedBytes * 0.1) { // 10% –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
      console.warn(`‚ö†Ô∏è –†–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é...`)
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã depth
      for (let testDepth of [64, 80, 96, 128, 256, 400, 512]) {
        const testBytes = width * height * testDepth * 2
        if (Math.abs(actualBytes - testBytes) < testBytes * 0.05) { // 5% –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
          depth = testDepth
          console.log(`‚úÖ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≥–ª—É–±–∏–Ω–∞: ${depth}`)
          break
        }
      }
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ Uint16Array –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    let alignedBuffer = buffer
    if (buffer.byteLength % 2 !== 0) {
      console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...')
      const newBuffer = new ArrayBuffer(buffer.byteLength + 1)
      const newView = new Uint8Array(newBuffer)
      const oldView = new Uint8Array(buffer)
      newView.set(oldView)
      newView[buffer.byteLength] = 0
      alignedBuffer = newBuffer
    }
    
    const data = new Uint16Array(alignedBuffer)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    let nonZeroCount = 0
    let maxValue = 0
    for (let i = 0; i < Math.min(data.length, 10000); i++) {
      if (data[i] > 0) nonZeroCount++
      maxValue = Math.max(maxValue, data[i])
    }
    
    console.log(`üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:`)
    console.log(`  - –ù–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–µ—Ä–≤—ã—Ö 10k: ${nonZeroCount}`)
    console.log(`  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${maxValue}`)
    console.log(`  - –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: ${(nonZeroCount / Math.min(data.length, 10000) * 100).toFixed(1)}%`)
    
    const volume: VolumeData = {
      width: width,
      height: height,
      depth: depth,
      data: data,
      spacing: [
        parseFloat(metadata.spacing_x) || 0.125,
        parseFloat(metadata.spacing_y) || 0.125,
        parseFloat(metadata.spacing_z) || 0.125
      ],
      origin: [0, 0, 0]
    }
    
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–º–∞:', {
      —Ä–∞–∑–º–µ—Ä—ã: `${volume.width}√ó${volume.height}√ó${volume.depth}`,
      —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: volume.spacing,
      '–æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö': `${(data.length * 2 / 1024 / 1024).toFixed(2)} –ú–ë`,
      '–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –æ–±—ä–µ–º': `${(nonZeroCount * 2 / 1024 / 1024).toFixed(2)} –ú–ë`
    })
    
    return volume
  }

  private renderVolume(volume: VolumeData): void {
    this.currentVolume = volume
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    this.volumeGroup.clear()
    this.sliceMeshes = []
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–º–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–∞–π—Å–æ–≤
    this.createVolumeSlices(volume)
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É
    const bounds = new THREE.Box3()
    bounds.setFromObject(this.volumeGroup)
    const center = bounds.getCenter(new THREE.Vector3())
    const size = bounds.getSize(new THREE.Vector3())
    
    this.camera.position.set(
      center.x + size.x * 1.5,
      center.y + size.y * 1.5,
      center.z + size.z * 1.5
    )
    this.camera.lookAt(center)
    this.controls.target.copy(center)
  }

  private createVolumeSlices(volume: VolumeData): void {
    const { width, height, depth, data, spacing } = volume
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é 3D –º–æ–¥–µ–ª—å –∑—É–±–∞ –∏–∑ –≤–æ–∫—Å–µ–ª–µ–π
    this.create3DTeethModel(volume)
    
    console.log(`ü¶∑ –°–æ–∑–¥–∞–Ω–∞ 3D –º–æ–¥–µ–ª—å –∑—É–±–∞ –∏–∑ –æ–±—ä–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`)
  }

  private create3DTeethModel(volume: VolumeData): void {
    const { width, height, depth, data, spacing } = volume
    
    console.log(`ü¶∑ –°–æ–∑–¥–∞–Ω–∏–µ –ù–ê–°–¢–û–Ø–©–ï–ì–û 3D –∑—É–±–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö ${width}√ó${height}√ó${depth}`)
    
    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –∑—É–±–Ω–æ–π —Ç–∫–∞–Ω–∏
    const { minVal, maxVal } = this.findDataRange(data)
    console.log(`üìä –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: ${minVal} - ${maxVal}`)
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∑—É–±–∞
    const toothMesh = this.createContinuousToothSurface(volume)
    
    if (toothMesh) {
      this.volumeGroup.add(toothMesh)
      console.log(`ü¶∑ –°–æ–∑–¥–∞–Ω –ù–ê–°–¢–û–Ø–©–ò–ô 3D –∑—É–±!`)
    } else {
      console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∑—É–±–∞`)
    }
  }
  
  private createContinuousToothSurface(volume: VolumeData): THREE.Mesh | null {
    const { width, height, depth, data, spacing } = volume
    const { minVal, maxVal } = this.findDataRange(data)
    
    console.log(`üî¨ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∑—É–±–∞...`)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –∑—É–±–Ω–æ–π —Ç–∫–∞–Ω–∏ (–±–µ—Ä–µ–º 30% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
    const threshold = minVal + (maxVal - minVal) * 0.3
    console.log(`üéØ –ü–æ—Ä–æ–≥ –¥–ª—è –∑—É–±–Ω–æ–π —Ç–∫–∞–Ω–∏: ${threshold}`)
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –≤–µ—Ä—à–∏–Ω –¥–ª—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    const vertices: number[] = []
    const faces: number[] = []
    const normals: number[] = []
    
    // –ú–∞—Å—à—Ç–∞–± –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    const scale = 2.0
    
    // –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞–∫–æ —Ç–æ—á–µ–∫ –∑—É–±–Ω–æ–π —Ç–∫–∞–Ω–∏
    const toothPoints: Array<{x: number, y: number, z: number, density: number}> = []
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∑—É–±—É
    for (let z = 0; z < depth; z++) {
      for (let y = 0; y < height; y++) {
        for (let x = 0; x < width; x++) {
          const index = z * width * height + y * width + x
          const value = data[index]
          
          if (value > threshold) {
            const worldX = (x - width/2) * spacing[0] * scale
            const worldY = (y - height/2) * spacing[1] * scale
            const worldZ = (z - depth/2) * spacing[2] * scale
            
            toothPoints.push({
              x: worldX,
              y: worldY, 
              z: worldZ,
              density: value
            })
          }
        }
      }
    }
    
    console.log(`üìç –ù–∞–π–¥–µ–Ω–æ ${toothPoints.length} —Ç–æ—á–µ–∫ –∑—É–±–Ω–æ–π —Ç–∫–∞–Ω–∏`)
    
    if (toothPoints.length === 0) {
      return null
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—ã–ø—É–∫–ª—É—é –æ–±–æ–ª–æ—á–∫—É –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∑—É–±–∞
    const toothMesh = this.createToothMeshFromPoints(toothPoints, minVal, maxVal)
    
    return toothMesh
  }
  
  private createToothMeshFromPoints(points: Array<{x: number, y: number, z: number, density: number}>, minVal: number, maxVal: number): THREE.Mesh {
    console.log(`üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—à–∞ –∑—É–±–∞ –∏–∑ ${points.length} —Ç–æ—á–µ–∫...`)
    
    if (points.length === 0) {
      return this.createFallbackCube()
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ç–æ—á–µ–∫
    const vertices: number[] = []
    const colors: number[] = []
    
    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞–∫–∞ —Ç–æ—á–µ–∫
    const bounds = {
      minX: Math.min(...points.map(p => p.x)),
      maxX: Math.max(...points.map(p => p.x)),
      minY: Math.min(...points.map(p => p.y)),
      maxY: Math.max(...points.map(p => p.y)),
      minZ: Math.min(...points.map(p => p.z)),
      maxZ: Math.max(...points.map(p => p.z))
    }
    
    console.log(`üìè –ì—Ä–∞–Ω–∏—Ü—ã –∑—É–±–∞:`, bounds)
    
    // –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏)
    const voxelSize = Math.max(
      (bounds.maxX - bounds.minX) / 20,
      (bounds.maxY - bounds.minY) / 20,
      (bounds.maxZ - bounds.minZ) / 20
    )
    
    console.log(`üì¶ –†–∞–∑–º–µ—Ä –≤–æ–∫—Å–µ–ª—è: ${voxelSize}`)
    
    // –°–æ–∑–¥–∞–µ–º –æ–∫—Ç–∞—ç–¥—Ä –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –∑—É–±–Ω–æ–π —Ç–∫–∞–Ω–∏
    let triangleCount = 0
    
    for (const point of points) {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ü–≤–µ—Ç–∞
      const normalizedDensity = (point.density - minVal) / (maxVal - minVal)
      
      // –¶–≤–µ—Ç –∑—É–±–∞: –æ—Ç –±–µ–∂–µ–≤–æ–≥–æ –¥–æ –±–µ–ª–æ–≥–æ
      let r, g, b
      if (normalizedDensity < 0.5) {
        // –î–µ–Ω—Ç–∏–Ω - –±–µ–∂–µ–≤—ã–π
        r = 0.9
        g = 0.8
        b = 0.6
      } else {
        // –≠–º–∞–ª—å - –±–µ–ª—ã–π
        const t = (normalizedDensity - 0.5) * 2
        r = 0.9 + t * 0.1
        g = 0.8 + t * 0.2  
        b = 0.6 + t * 0.4
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–∫—Ç–∞—ç–¥—Ä –¥–ª—è —ç—Ç–æ–π —Ç–æ—á–∫–∏
      this.addOctahedron(
        point.x, point.y, point.z,
        voxelSize,
        r, g, b,
        vertices, colors
      )
      
      triangleCount += 8 // 8 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –≤ –æ–∫—Ç–∞—ç–¥—Ä–µ
    }
    
    console.log(`üî∫ –°–æ–∑–¥–∞–Ω–æ ${vertices.length/3} –≤–µ—Ä—à–∏–Ω –∏ ${triangleCount} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤`)
    
    if (vertices.length === 0) {
      console.log(`‚ö†Ô∏è –ù–µ—Ç –≤–µ—Ä—à–∏–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫—É–±`)
      return this.createFallbackCube()
    }
    
    // –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
    const geometry = new THREE.BufferGeometry()
    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3))
    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3))
    geometry.computeVertexNormals()
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∑—É–±–∞
    const material = new THREE.MeshPhongMaterial({
      vertexColors: true,
      shininess: 100,
      transparent: false,
      side: THREE.DoubleSide
    })
    
    const mesh = new THREE.Mesh(geometry, material)
    mesh.name = 'tooth'
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π 3D –∑—É–±!`)
    return mesh
  }
  
  private createFallbackCube(): THREE.Mesh {
    console.log(`üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É–±–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏`)
    
    const geometry = new THREE.BoxGeometry(20, 20, 20)
    const material = new THREE.MeshPhongMaterial({
      color: 0xffffff,
      shininess: 100
    })
    
    const mesh = new THREE.Mesh(geometry, material)
    mesh.name = 'fallback-cube'
    
    return mesh
  }
  
  private interpolateDensity(x: number, y: number, z: number, points: Array<{x: number, y: number, z: number, density: number}>): number {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    return 0
  }
  
  private addToothSurfaceTriangles(
    x: number, y: number, z: number,
    stepX: number, stepY: number, stepZ: number,
    densities: number[],
    threshold: number,
    vertices: number[], faces: number[], colors: number[],
    vertexOffset: number,
    minVal: number, maxVal: number
  ): void {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  }
  
  private addOctahedron(
    x: number, y: number, z: number,
    size: number,
    r: number, g: number, b: number,
    vertices: number[], colors: number[]
  ): void {
    const s = size / 2
    
    // 6 –≤–µ—Ä—à–∏–Ω –æ–∫—Ç–∞—ç–¥—Ä–∞
    const octVertices = [
      [x, y, z + s],  // –≤–µ—Ä—Ö
      [x, y, z - s],  // –Ω–∏–∑
      [x + s, y, z],  // –ø—Ä–∞–≤–æ
      [x - s, y, z],  // –ª–µ–≤–æ
      [x, y + s, z],  // –ø–µ—Ä–µ–¥
      [x, y - s, z]   // –∑–∞–¥
    ]
    
    // 8 —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã—Ö –≥—Ä–∞–Ω–µ–π –æ–∫—Ç–∞—ç–¥—Ä–∞
    const octFaces = [
      [0, 2, 4], [0, 4, 3], [0, 3, 5], [0, 5, 2], // –≤–µ—Ä—Ö–Ω–∏–µ –≥—Ä–∞–Ω–∏
      [1, 4, 2], [1, 3, 4], [1, 5, 3], [1, 2, 5]  // –Ω–∏–∂–Ω–∏–µ –≥—Ä–∞–Ω–∏
    ]
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
    for (const face of octFaces) {
      for (const vertexIndex of face) {
        const vertex = octVertices[vertexIndex]
        vertices.push(vertex[0], vertex[1], vertex[2])
        colors.push(r, g, b)
      }
    }
  }
  
  private createVoxelToothModel(volume: VolumeData): void {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - —É–¥–∞–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–¥–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
  }

  private createDebugCube(volume: VolumeData): void {
    console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –∫—É–±–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö...')
    
    const { width, height, depth, spacing } = volume
    const geometry = new THREE.BoxGeometry(
      width * spacing[0] * 5,  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤ 5 —Ä–∞–∑ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
      height * spacing[1] * 5,
      depth * spacing[2] * 5
    )
    
    const material = new THREE.MeshLambertMaterial({
      color: 0x44aa88,
      transparent: true,
      opacity: 0.3,
      wireframe: true
    })
    
    const debugCube = new THREE.Mesh(geometry, material)
    this.volumeGroup.add(debugCube)
    
    console.log(`üì¶ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –∫—É–± —Å–æ–∑–¥–∞–Ω —Ä–∞–∑–º–µ—Ä–æ–º ${width * spacing[0] * 5}√ó${height * spacing[1] * 5}√ó${depth * spacing[2] * 5}`)
  }

  private findDataRange(data: Uint16Array): { minVal: number, maxVal: number } {
    let minVal = Infinity
    let maxVal = -Infinity
    
    for (let i = 0; i < data.length; i++) {
      const value = data[i]
      if (value > 0) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        minVal = Math.min(minVal, value)
        maxVal = Math.max(maxVal, value)
      }
    }
    
    return { minVal, maxVal }
  }

  private addVoxelCube(vertices: number[], colors: number[], x: number, y: number, z: number, size: number, intensity: number, minVal: number, maxVal: number): void {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - —É–¥–∞–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–¥–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
  }

  private createVoxelMesh(positions: number[], colors: number[]): THREE.Mesh {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - —É–¥–∞–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–¥–∫–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    const geometry = new THREE.BufferGeometry()
    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3))
    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3))
    geometry.computeVertexNormals()
    
    const material = new THREE.MeshLambertMaterial({ 
      vertexColors: true,
      transparent: true,
      opacity: 0.8,
      side: THREE.DoubleSide
    })
    
    const mesh = new THREE.Mesh(geometry, material)
    return mesh
  }

  private createSliceTexture(volume: VolumeData, sliceIndex: number, orientation: 'axial' | 'sagittal' | 'coronal'): HTMLCanvasElement {
    const { width, height, depth, data } = volume
    
    const canvas = document.createElement('canvas')
    canvas.width = width
    canvas.height = height
    
    const ctx = canvas.getContext('2d')!
    const imageData = ctx.createImageData(width, height)
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let minVal = Infinity
    let maxVal = -Infinity
    
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        let voxelIndex: number
        
        if (orientation === 'axial') {
          voxelIndex = sliceIndex * width * height + y * width + x
        } else if (orientation === 'sagittal') {
          voxelIndex = y * width * height + sliceIndex * width + x
        } else { // coronal
          voxelIndex = y * width * height + x * width + sliceIndex
        }
        
        if (voxelIndex < data.length) {
          const value = data[voxelIndex]
          minVal = Math.min(minVal, value)
          maxVal = Math.max(maxVal, value)
        }
      }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º window/level –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const windowMin = this.settings.windowLevel - this.settings.windowWidth / 2
    const windowMax = this.settings.windowLevel + this.settings.windowWidth / 2
    
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        let voxelIndex: number
        
        if (orientation === 'axial') {
          voxelIndex = sliceIndex * width * height + y * width + x
        } else if (orientation === 'sagittal') {
          voxelIndex = y * width * height + sliceIndex * width + x
        } else { // coronal
          voxelIndex = y * width * height + x * width + sliceIndex
        }
        
        let value = 0
        if (voxelIndex < data.length) {
          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
          const rawValue = data[voxelIndex]
          const normalizedValue = (rawValue - minVal) / (maxVal - minVal)
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º window/level
          value = Math.max(0, Math.min(1, (normalizedValue - windowMin) / (windowMax - windowMin)))
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º threshold
          if (value < this.settings.threshold) {
            value = 0
          }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É
        const color = this.applyColormap(value)
        
        const pixelIndex = (y * width + x) * 4
        imageData.data[pixelIndex] = color.r     // R
        imageData.data[pixelIndex + 1] = color.g // G
        imageData.data[pixelIndex + 2] = color.b // B
        imageData.data[pixelIndex + 3] = value > 0 ? 255 : 0 // A
      }
    }
    
    ctx.putImageData(imageData, 0, 0)
    return canvas
  }

  private applyColormap(value: number): { r: number, g: number, b: number } {
    const v = Math.max(0, Math.min(1, value))
    
    switch (this.settings.colormap) {
      case 'bone':
        // –ö–æ—Å—Ç–Ω–∞—è —Ç–∫–∞–Ω—å - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è –∑—É–±–æ–≤ –∏ –∫–æ—Å—Ç–µ–π
        if (v < 0.3) {
          // –ú—è–≥–∫–∞—è —Ç–∫–∞–Ω—å - —Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω–æ–≤–∞—Ç–∞—è
          return { r: Math.floor(v * 120), g: Math.floor(v * 60), b: Math.floor(v * 60) }
        } else if (v < 0.7) {
          // –ö–æ—Å—Ç–Ω–∞—è —Ç–∫–∞–Ω—å - –±–µ–∂–µ–≤–∞—è
          const t = (v - 0.3) / 0.4
          return { 
            r: Math.floor(120 + t * 135), 
            g: Math.floor(60 + t * 155), 
            b: Math.floor(60 + t * 140) 
          }
        } else {
          // –ü–ª–æ—Ç–Ω–∞—è –∫–æ—Å—Ç—å/—ç–º–∞–ª—å - –±–µ–ª–∞—è
          const t = (v - 0.7) / 0.3
          return { 
            r: Math.floor(255), 
            g: Math.floor(215 + t * 40), 
            b: Math.floor(200 + t * 55) 
          }
        }
      case 'hot':
        // –ì–æ—Ä—è—á–∞—è –∫–∞—Ä—Ç–∞
        if (v < 0.33) {
          return { r: Math.floor(v * 3 * 255), g: 0, b: 0 }
        } else if (v < 0.66) {
          return { r: 255, g: Math.floor((v - 0.33) * 3 * 255), b: 0 }
        } else {
          return { r: 255, g: 255, b: Math.floor((v - 0.66) * 3 * 255) }
        }
      case 'cool':
        // –•–æ–ª–æ–¥–Ω–∞—è –∫–∞—Ä—Ç–∞
        return {
          r: Math.floor(v * 255),
          g: Math.floor((1-v) * 255),
          b: 255
        }
      case 'gray':
      default:
        // –û—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
        const gray = Math.floor(v * 255)
        return { r: gray, g: gray, b: gray }
    }
  }

  private create2DSlices(volume: VolumeData): void {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è 2D —Å–ª–∞–π—Å–æ–≤
    const sliceContainer = document.createElement('div')
    sliceContainer.id = 'slice-container'
    sliceContainer.style.cssText = `
      position: absolute;
      top: 10px;
      right: 10px;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 10px;
      background: rgba(0,0,0,0.8);
      padding: 10px;
      border-radius: 8px;
      z-index: 100;
    `
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingContainer = this.container.querySelector('#slice-container')
    if (existingContainer) {
      existingContainer.remove()
    }
    
    const axialCanvas = this.createSliceCanvas('–ê–∫—Å–∏–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑', volume, 'axial')
    const sagittalCanvas = this.createSliceCanvas('–°–∞–≥–∏—Ç—Ç–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑', volume, 'sagittal') 
    const coronalCanvas = this.createSliceCanvas('–ö–æ—Ä–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑', volume, 'coronal')
    
    sliceContainer.appendChild(axialCanvas)
    sliceContainer.appendChild(sagittalCanvas)
    sliceContainer.appendChild(coronalCanvas)
    
    this.container.appendChild(sliceContainer)
  }

  private createSliceCanvas(title: string, volume: VolumeData, orientation: 'axial' | 'sagittal' | 'coronal'): HTMLCanvasElement {
    const canvas = document.createElement('canvas')
    canvas.width = 150
    canvas.height = 150
    canvas.style.cssText = `
      border: 1px solid #333;
      cursor: pointer;
      border-radius: 4px;
    `
    
    // –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–∏–π —Å—Ä–µ–∑
    const sliceIndex = Math.floor(volume.depth / 2)
    const sliceTexture = this.createSliceTexture(volume, sliceIndex, orientation)
    
    const ctx = canvas.getContext('2d')!
    ctx.drawImage(sliceTexture, 0, 0, canvas.width, canvas.height)
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    ctx.fillStyle = 'white'
    ctx.font = '11px Arial'
    ctx.shadowColor = 'black'
    ctx.shadowBlur = 2
    ctx.fillText(title, 5, 15)
    ctx.shadowBlur = 0
    
    return canvas
  }

  private setupEventListeners(): void {
    window.addEventListener('resize', this.onWindowResize.bind(this))
  }

  private onWindowResize(): void {
    const width = this.container.clientWidth
    const height = this.container.clientHeight
    
    this.camera.aspect = width / height
    this.camera.updateProjectionMatrix()
    this.renderer.setSize(width, height)
  }

  private animate(): void {
    requestAnimationFrame(this.animate.bind(this))
    
    this.controls.update()
    this.renderer.render(this.scene, this.camera)
  }

  public updateSettings(newSettings: Partial<VolumeSettings>): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    this.settings = { ...this.settings, ...newSettings }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (this.currentVolume) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:', newSettings)
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—ä–µ–º
      this.volumeGroup.clear()
      this.sliceMeshes = []
      
      // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      this.renderVolume(this.currentVolume)
      this.create2DSlices(this.currentVolume)
    }
  }

  public dispose(): void {
    // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    this.sliceMeshes.forEach(mesh => {
      if (mesh.material instanceof THREE.Material) {
        mesh.material.dispose()
      }
      if (mesh.geometry) {
        mesh.geometry.dispose()
      }
    })
    
    this.renderer.dispose()
    
    // –£–¥–∞–ª—è–µ–º —Å–ª–∞–π—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const sliceContainer = this.container.querySelector('#slice-container')
    if (sliceContainer) {
      sliceContainer.remove()
    }
  }
} 