import JSZip from 'jszip'

export interface ExtractedFile {
  name: string
  content: ArrayBuffer
  size: number
}

export interface ArchiveAnalysis {
  format: 'zip' | 'rar' | 'folder' | 'unknown'
  totalFiles: number
  medicalFiles: ExtractedFile[]
  programFiles: string[]
  totalSize: number
}

export class ArchiveExtractor {
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞
   */
  static detectArchiveFormat(arrayBuffer: ArrayBuffer): 'zip' | 'rar' | 'unknown' {
    const uint8Array = new Uint8Array(arrayBuffer)
    
    // ZIP signature: PK (0x504B)
    if (uint8Array[0] === 0x50 && uint8Array[1] === 0x4B) {
      return 'zip'
    }
    
    // RAR signature: Rar! (0x526172211A0700) –∏–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (uint8Array[0] === 0x52 && uint8Array[1] === 0x61 && uint8Array[2] === 0x72 && uint8Array[3] === 0x21) {
      return 'rar'
    }
    
    return 'unknown'
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º OneVolumeViewer —Ñ–∞–π–ª–æ–º
   */
  static isMedicalFile(filename: string): boolean {
    const name = filename.toLowerCase()
    return (
      name.endsWith('.vol') ||
      name.includes('volumeid.xml') ||
      name.includes('ver_ctrl.txt') ||
      name.includes('cmpr_0.xml') ||
      name.includes('constants.csv') ||
      name.includes('ctstatus.csv') ||
      name.includes('cttaskid.jmd')
    )
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–∞–π–ª–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã
   */
  static isProgramFile(filename: string): boolean {
    const name = filename.toLowerCase()
    return (
      name.endsWith('.exe') ||
      name.endsWith('.dll') ||
      name.endsWith('.pdf') ||
      name.includes('api-ms-win') ||
      name.includes('mfc140') ||
      name.includes('vcruntime') ||
      name.includes('ucrtbase') ||
      name.includes('.cjstyles') ||
      name.includes('.ini')
    )
  }
  
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞
   */
  static async extractZip(arrayBuffer: ArrayBuffer): Promise<ExtractedFile[]> {
    try {
      const zip = await JSZip.loadAsync(arrayBuffer)
      const extractedFiles: ExtractedFile[] = []
      
      console.log(`üì¶ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç ${Object.keys(zip.files).length} —Ñ–∞–π–ª–æ–≤`)
      
      for (const [path, file] of Object.entries(zip.files)) {
        if (!file.dir && this.isMedicalFile(path)) {
          console.log(`üè• –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ñ–∞–π–ª: ${path}`)
          const content = await file.async('arraybuffer')
          
          extractedFiles.push({
            name: path.split('/').pop() || path, // –¢–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–∏
            content,
            size: content.byteLength
          })
        }
      }
      
      return extractedFiles
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ZIP:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ZIP –∞—Ä—Ö–∏–≤')
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è RAR —Ñ–∞–π–ª–æ–≤ (–ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ)
   */
  static async extractRar(arrayBuffer: ArrayBuffer): Promise<ExtractedFile[]> {
    console.log('‚ö†Ô∏è RAR –∞—Ä—Ö–∏–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ –ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ RAR –≤ ZIP –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
    
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    throw new Error(`
üì¶ RAR –∞—Ä—Ö–∏–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ RAR –∞—Ä—Ö–∏–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.

üîÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ RAR –≤ ZIP –∞—Ä—Ö–∏–≤
2. –ò–ª–∏ –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ñ–∞–π–ª—ã –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞–ø–∫—É
3. –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚úÖ ZIP –∞—Ä—Ö–∏–≤—ã
‚úÖ –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (.vol, .xml, .txt)
‚úÖ –ü–∞–ø–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏
    `)
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç FileList –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ñ–∞–π–ª—ã
   */
  static async analyzeAndExtract(files: FileList): Promise<ArchiveAnalysis> {
    console.log(`üîç –ê–Ω–∞–ª–∏–∑ ${files.length} —Ñ–∞–π–ª–æ–≤...`)
    
    const analysis: ArchiveAnalysis = {
      format: 'folder',
      totalFiles: files.length,
      medicalFiles: [],
      programFiles: [],
      totalSize: 0
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    for (let i = 0; i < files.length; i++) {
      const file = files[i]
      analysis.totalSize += file.size
      
      if (file.name.toLowerCase().endsWith('.zip')) {
        console.log('üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω ZIP –∞—Ä—Ö–∏–≤:', file.name)
        analysis.format = 'zip'
        
        try {
          const arrayBuffer = await file.arrayBuffer()
          const extractedFiles = await this.extractZip(arrayBuffer)
          analysis.medicalFiles.push(...extractedFiles)
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ZIP:', error)
          throw error
        }
        
      } else if (file.name.toLowerCase().endsWith('.rar')) {
        console.log('üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω RAR –∞—Ä—Ö–∏–≤:', file.name)
        analysis.format = 'rar'
        
        try {
          const arrayBuffer = await file.arrayBuffer()
          await this.extractRar(arrayBuffer) // –≠—Ç–æ –≤—ã–±—Ä–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—à–∏–±–∫—É
        } catch (error) {
          throw error // –ü–µ—Ä–µ–ø—Ä–æ—à—É –æ—à–∏–±–∫—É –≤—ã—à–µ
        }
        
      } else if (this.isMedicalFile(file.name)) {
        console.log('üè• –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ñ–∞–π–ª:', file.name)
        
        const content = await file.arrayBuffer()
        analysis.medicalFiles.push({
          name: file.name,
          content,
          size: content.byteLength
        })
        
      } else if (this.isProgramFile(file.name)) {
        analysis.programFiles.push(file.name)
      }
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: ${analysis.medicalFiles.length}`)
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã: ${analysis.programFiles.length}`)
    
    return analysis
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç FileList-–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  static createFileListFromExtracted(extractedFiles: ExtractedFile[]): FileList {
    const files: File[] = []
    
    for (const extracted of extractedFiles) {
      const blob = new Blob([extracted.content])
      const file = new File([blob], extracted.name, {
        type: this.getMimeType(extracted.name)
      })
      files.push(file)
    }
    
    // –°–æ–∑–¥–∞–µ–º FileList-–ø–æ–¥–æ–±–Ω—ã–π –æ–±—ä–µ–∫—Ç
    const fileList = {
      length: files.length,
      item: (index: number) => files[index] || null,
      [Symbol.iterator]: function* () {
        for (let i = 0; i < this.length; i++) {
          yield this.item(i)
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–∞–∫ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    files.forEach((file, index) => {
      Object.defineProperty(fileList, index, {
        value: file,
        enumerable: true
      })
    })
    
    return fileList as FileList
  }
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MIME —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
   */
  static getMimeType(filename: string): string {
    const ext = filename.toLowerCase().split('.').pop()
    switch (ext) {
      case 'vol': return 'application/octet-stream'
      case 'xml': return 'application/xml'
      case 'txt': return 'text/plain'
      case 'csv': return 'text/csv'
      case 'jmd': return 'application/octet-stream'
      default: return 'application/octet-stream'
    }
  }
}

 
 
 
 