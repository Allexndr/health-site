export interface VolumeData {
  data: Uint16Array
  width: number
  height: number
  depth: number
  spacing?: [number, number, number]
  metadata?: {
    patientName?: string
    studyDate?: string
    modality?: string
    description?: string
  }
}

export class SimpleVolumeParser {
  
  /**
   * –ü–∞—Ä—Å–∏—Ç .vol —Ñ–∞–π–ª OneVolumeViewer
   */
  static async parseVolFile(arrayBuffer: ArrayBuffer): Promise<VolumeData> {
    try {
      console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ .vol —Ñ–∞–π–ª–∞...')
      
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ 16-–±–∏—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const uint16Array = new Uint16Array(arrayBuffer)
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
      const totalPixels = uint16Array.length
      
      // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö CT
      const possibleDimensions = [
        [256, 256, 256], // 16,777,216 –ø–∏–∫—Å–µ–ª–µ–π
        [512, 512, 256], // 67,108,864 –ø–∏–∫—Å–µ–ª–µ–π
        [512, 512, 512], // 134,217,728 –ø–∏–∫—Å–µ–ª–µ–π
        [256, 256, 128], // 8,388,608 –ø–∏–∫—Å–µ–ª–µ–π
        [128, 128, 128], // 2,097,152 –ø–∏–∫—Å–µ–ª–µ–π
      ]
      
      let width = 256
      let height = 256
      let depth = 256
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
      for (const [w, h, d] of possibleDimensions) {
        if (w * h * d === totalPixels) {
          width = w
          height = h
          depth = d
          break
        }
      }
      
      // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
      if (width * height * depth !== totalPixels) {
        const cubeRoot = Math.cbrt(totalPixels)
        width = Math.floor(cubeRoot)
        height = Math.floor(cubeRoot)
        depth = Math.floor(totalPixels / (width * height))
        
        console.log(`‚ö†Ô∏è –¢–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º: ${width}x${height}x${depth}`)
      }
      
      console.log(`‚úÖ –†–∞–∑–º–µ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: ${width}x${height}x${depth}`)
      
      return {
        data: uint16Array,
        width,
        height,
        depth,
        spacing: [0.1, 0.1, 0.1], // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤–æ–∫—Å–µ–ª–µ–π –≤ –º–º
        metadata: {
          modality: 'CT',
          description: 'OneVolumeViewer CT Data'
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ .vol —Ñ–∞–π–ª–∞:', error)
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å .vol —Ñ–∞–π–ª: ${error}`)
    }
  }
  
  /**
   * –ü–∞—Ä—Å–∏—Ç ZIP –∞—Ä—Ö–∏–≤ —Å OneVolumeViewer —Ñ–∞–π–ª–∞–º–∏
   */
  static async parseZipArchive(arrayBuffer: ArrayBuffer): Promise<VolumeData> {
    try {
      console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ ZIP –∞—Ä—Ö–∏–≤–∞...')
      
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º JSZip
      const JSZip = (await import('jszip')).default
      const zip = new JSZip()
      
      const zipData = await zip.loadAsync(arrayBuffer)
      
      // –ò—â–µ–º .vol —Ñ–∞–π–ª
      let volFile: any = null
      let metadata: any = {}
      
      for (const [filename, file] of Object.entries(zipData.files)) {
        console.log(`üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${filename}`)
        
        if (filename.toLowerCase().endsWith('.vol')) {
          volFile = file
        } else if (filename.toLowerCase().includes('volumeid') || filename.toLowerCase().endsWith('.xml')) {
          // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
          try {
            const xmlContent = await file.async('text')
            metadata = this.parseXMLMetadata(xmlContent)
          } catch (e) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å XML –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', e)
          }
        }
      }
      
      if (!volFile) {
        throw new Error('–§–∞–π–ª .vol –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ')
      }
      
      console.log('‚úÖ .vol —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ')
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ .vol —Ñ–∞–π–ª–∞
      const volData = await volFile.async('arraybuffer')
      
      // –ü–∞—Ä—Å–∏–º .vol —Ñ–∞–π–ª
      const volumeData = await this.parseVolFile(volData)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ä—Ö–∏–≤–∞
      volumeData.metadata = {
        ...volumeData.metadata,
        ...metadata
      }
      
      return volumeData
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ZIP –∞—Ä—Ö–∏–≤–∞:', error)
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤: ${error}`)
    }
  }
  
  /**
   * –ü–∞—Ä—Å–∏—Ç XML –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
   */
  private static parseXMLMetadata(xmlContent: string): any {
    try {
      const parser = new DOMParser()
      const xmlDoc = parser.parseFromString(xmlContent, 'text/xml')
      
      const metadata: any = {}
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
      const patientName = xmlDoc.querySelector('PatientName')?.textContent
      if (patientName) metadata.patientName = patientName
      
      const studyDate = xmlDoc.querySelector('StudyDate')?.textContent
      if (studyDate) metadata.studyDate = studyDate
      
      const modality = xmlDoc.querySelector('Modality')?.textContent
      if (modality) metadata.modality = modality
      
      const description = xmlDoc.querySelector('StudyDescription')?.textContent
      if (description) metadata.description = description
      
      console.log('üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', metadata)
      return metadata
      
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML:', error)
      return {}
    }
  }
  
  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø–∞—Ä—Å–∏—Ç –µ–≥–æ
   */
  static async parseFile(file: File): Promise<VolumeData> {
    console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${file.name} (${file.size} –±–∞–π—Ç)`)
    
    const arrayBuffer = await file.arrayBuffer()
    
    if (file.name.toLowerCase().endsWith('.zip')) {
      return this.parseZipArchive(arrayBuffer)
    } else if (file.name.toLowerCase().endsWith('.vol')) {
      return this.parseVolFile(arrayBuffer)
    } else {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${file.name}`)
    }
  }
} 